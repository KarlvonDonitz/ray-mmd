#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/Shadow.fxsub"

float mWidthP : CONTROLOBJECT<string name = "(OffscreenOwner)"; string item = "Width+";>;
float mHeightP : CONTROLOBJECT<string name = "(OffscreenOwner)"; string item = "Height+";>;
float3 mPosition : CONTROLOBJECT<string name="(OffscreenOwner)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name="(OffscreenOwner)"; string item = "Direction";>;

static const float3 LightPosition = mPosition;
static const float3 LightDirection = normalize(mDirection - mPosition);

static float4x4 matLightProject = CreateOrthoProject(lerp(50, 100, mWidthP), lerp(50, 100, mHeightP), mLightPlaneNear, mLightPlaneFar);
static float4x4 matLightView = CreateLightViewMatrix(LightDirection, LightPosition);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);

#if CASTER_ALPHA_MAP_ENABLE
texture DiffuseMap : MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state 
{
	texture = <DiffuseMap>;
	MINFILTER = POINT; MAGFILTER = POINT; MIPFILTER = POINT;
	ADDRESSU = WRAP; ADDRESSV = WRAP;
};
#endif

void ShadowMapVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition : POSITION)
{
	oPosition = mul(mul(Position, matLightViewProject), CreateReversedDepthMatrix());
	oPosition.z = oPosition.z * oPosition.w;
	
	oTexcoord0 = Texcoord;
	oTexcoord1 = oPosition;
}

float4 ShadowMapPS(in float2 coord : TEXCOORD0, in float4 position : TEXCOORD1) : COLOR
{
#if CASTER_ALPHA_ENABLE
	clip(!opadd - 0.001f);	
	float alpha = MaterialDiffuse.a;
#if CASTER_ALPHA_MAP_ENABLE
	if (use_texture) alpha *= tex2D(DiffuseMapSamp, coord).a;
#endif
	clip(alpha - CasterAlphaThreshold);
#endif
	return position.z;
}

technique DepthTecSS<string MMDPass = "object_ss";> {
	pass DrawObject {
		ZFunc = Greater;
		AlphaBlendEnable = false; AlphaTestEnable = false;
		VertexShader = compile vs_3_0 ShadowMapVS();
		PixelShader  = compile ps_3_0 ShadowMapPS();
	}
}

technique DepthTec<string MMDPass = "object";>{}
technique EdgeTec<string MMDPass = "edge";> {}
technique ShadowTec<string MMDPass = "shadow";> {}
technique ZplotTec<string MMDPass = "zplot";> {}