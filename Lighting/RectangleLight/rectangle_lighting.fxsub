#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/Color.fxsub"
#include "../../../shader/Packing.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/BRDF.fxsub"
#include "../../../shader/arealight.fxsub"
#include "../../../shader/LTC.fxsub"
#include "../../../shader/DeclareGbufferTexture.fxsub"

#if SHADOW_MAP_FROM > 0
#	include "../../../shader/Poisson.fxsub"
#	include "../../../shader/Shadow.fxsub"
#endif

#define RECTANGLE_LIGHT_MAX_WIDTH 50
#define RECTANGLE_LIGHT_MAX_HEIGHT 50

float3 mPosition : CONTROLOBJECT<string name = "(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name = "(self)"; string item = "Direction";>;

float3 mLeftTop : CONTROLOBJECT<string name = "(self)"; string item = "LeftTop";>;
float3 mLeftBottom : CONTROLOBJECT<string name = "(self)"; string item = "LeftBottom";>;
float3 mRightTop : CONTROLOBJECT<string name = "(self)"; string item = "RightTop";>;
float3 mRightBottom : CONTROLOBJECT<string name = "(self)"; string item = "RightBottom";>;

float mHP : CONTROLOBJECT<string name = "(self)"; string item = "H+";>;
float mSP : CONTROLOBJECT<string name = "(self)"; string item = "S+";>;
float mVP : CONTROLOBJECT<string name = "(self)"; string item = "V+";>;
float mVM : CONTROLOBJECT<string name = "(self)"; string item = "V-";>;
float mBlink : CONTROLOBJECT<string name = "(self)"; string item = "Blink";>;
float mRangeP : CONTROLOBJECT<string name = "(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name = "(self)"; string item = "Range-";>;
float mWidthP : CONTROLOBJECT<string name = "(self)"; string item = "Width+";>;
float mHeightP : CONTROLOBJECT<string name = "(self)"; string item = "Height+";>;
float mRadiusP : CONTROLOBJECT<string name = "(self)"; string item = "Radius+";>;
float mRadiusM : CONTROLOBJECT<string name = "(self)"; string item = "Radius-";>;
float mTemperatureP : CONTROLOBJECT<string name = "(self)"; string item = "Temperature+";>;
float mTemperatureM : CONTROLOBJECT<string name = "(self)"; string item = "Temperature-";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float mAttenuationBulbM : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb-";>;

float mMultiLightP : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight+";>;
float mMultiLightM : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight-";>;

static const float LightWidth = lerp(1, RECTANGLE_LIGHT_MAX_WIDTH, mWidthP);
static const float LightHeight = lerp(1, RECTANGLE_LIGHT_MAX_HEIGHT, mHeightP);
static const float LightBlink = saturate(1 - SmoothTriangleWave(time * (mBlink * 10)));
static const float LightRadius = lerp(lerp(lightRadiusLimits.x, lightRadiusLimits.z, mRadiusP), lightRadiusLimits.y, mRadiusM);
static const float LightRange = lerp(lerp(lightRangeParams.x, lightRangeParams.z, mRangeP), lightRangeParams.y, mRangeM);
static const float LightAttenuationBulb = lerp(lerp(lightAttenuationBulbParams.x, lightAttenuationBulbParams.z, mAttenuationBulbP), lightAttenuationBulbParams.y, mAttenuationBulbM);
static const float LightIntensity = lerp(lerp(lightIntensityParams.x, lightIntensityParams.z, mVP), lightIntensityParams.y, mVM);
static const float LightIntensity2 = lerp(lerp(mLightIntensityMin, mLightIntensityMax, mMultiLightP), 0, mMultiLightM);
static const float LightTemperature = lerp(lerp(lightTemperatureLimits.x, lightTemperatureLimits.z, mTemperatureP), lightTemperatureLimits.y, mTemperatureM);

static const float3 LightPosition = mPosition;
static const float2 LightRect = float2(LightWidth, LightHeight);
static const float3 LightDirection = normalize(mDirection - mPosition);
static const float3 LightColor = float3(mHP, mSP, LightIntensity * LightIntensity2 * LightBlink);

static const float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
static const float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));
static const float3 viewLightRight = normalize(mul((mRightTop + mRightBottom) * 0.5 - LightPosition, (float3x3)matView));
static const float3 viewLightUp = normalize(cross(viewLightDirection, viewLightRight));

#if SHADOW_MAP_FROM > 0
shared texture ShadowMap: OFFSCREENRENDERTARGET <
	string Description = "Shadow Rendering for Rectangle_Light";
	int2 Dimensions = {MULTI_SHADOW_MAP_SIZE, MULTI_SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 0.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../rectangle_shadow.fx;"
		"*.pmd = ../rectangle_shadow.fx;"
		"* = hide";
>;
sampler ShadowMapSamp = sampler_state {
	texture = <ShadowMap>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static const float ShadowMapOffset  = 0.5 / MULTI_SHADOW_MAP_SIZE;
static const float ShadowMapOffset2 = 1.0 / MULTI_SHADOW_MAP_SIZE;

static const float4x4 matLightProject = CreateOrthoProject(lerp(50, 100, mWidthP), lerp(50, 100, mHeightP), mLightPlaneNear, mLightPlaneFar);
static const float4x4 matLightView = CreateLightViewMatrix(LightDirection, LightPosition);
static const float4x4 matLightViewProject = mul(matLightView, matLightProject);
static const float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static const float4x4 matLightProjectFromCameraView = mul(matViewInverse, matLightViewProject);

#if defined(MULTI_SHADOW_PCSS)
float2 FindBlocker(sampler _ShadowTex, float2 uv, float depth, float2 searchRadius, float2 rotation)
{
    float blockerWeight = 0;
    float blockerDepthSum = 0.0;

    for (int i = 0; i < MULTI_SHADOW_BLOCKER_COUNT; i++)
    {
		float sampleDepth = 1 - tex2Dlod(_ShadowTex, float4(uv + Rotate(MULTI_SHADOW_BLOCKER_POISSON[i], rotation) * searchRadius, 0, 0)).r;
        if (sampleDepth < depth)
        {
            blockerDepthSum += sampleDepth;
            blockerWeight++;
        }
    }

    return float2(blockerDepthSum / max(1e-5, blockerWeight), blockerWeight);
}
#endif

float ShadingShadow(float2 uv, float linearDepth, float receiverDepth, float radius, float random)
{
	float2 rotation = float2(cos(random * PI_2), sin(random * PI_2));

#if defined(MULTI_SHADOW_PCSS)
	float2 searchRegionRadius = SearchRegionRadius(radius, linearDepth, mLightPlaneNear);
	float2 blocker = FindBlocker(ShadowMapSamp, uv, receiverDepth, searchRegionRadius, rotation);

	float2 penumbraRatio = PenumbraRadius(radius, receiverDepth, GetLinearDepth(blocker.x, mLightPlaneNear / 2, mLightPlaneFar));
	float2 filterSize = ProjectToLight(penumbraRatio, linearDepth, mLightPlaneNear);

	[branch]
	if (blocker.y <= 0)
	{
		return 1;
	}
#else
	float2 filterSize = radius * 0.01;
#endif

	float shadow = 0;

	[unroll]
	for (int i = 0; i < MULTI_SHADOW_POISSON_COUNT; i+=4)
	{
		float2 samplePoints[4];
		samplePoints[0] = Rotate(MULTI_SHADOW_POISSON[i], rotation);
		samplePoints[1] = Rotate(MULTI_SHADOW_POISSON[i+1], rotation);
		samplePoints[2] = Rotate(MULTI_SHADOW_POISSON[i+2], rotation);
		samplePoints[3] = Rotate(MULTI_SHADOW_POISSON[i+3], rotation);
		
		float4 sampleDepth;
		sampleDepth[0] = tex2Dlod(ShadowMapSamp, float4(uv + samplePoints[0] * filterSize, 0, 0)).r;
		sampleDepth[1] = tex2Dlod(ShadowMapSamp, float4(uv + samplePoints[1] * filterSize, 0, 0)).r;
		sampleDepth[2] = tex2Dlod(ShadowMapSamp, float4(uv + samplePoints[2] * filterSize, 0, 0)).r;
		sampleDepth[3] = tex2Dlod(ShadowMapSamp, float4(uv + samplePoints[3] * filterSize, 0, 0)).r;

		sampleDepth = 1 - sampleDepth;

		shadow += receiverDepth < sampleDepth.x ? 1: 0;
		shadow += receiverDepth < sampleDepth.y ? 1: 0;
		shadow += receiverDepth < sampleDepth.z ? 1: 0;
		shadow += receiverDepth < sampleDepth.w ? 1: 0;
	}

	return shadow / MULTI_SHADOW_POISSON_COUNT;
}
#endif

#if VIDEO_MAP_FROM
	#if VIDEO_MAP_FROM == 1
		texture VideoMap<string ResourceName = VIDEO_MAP_FILE;>;
	#elif VIDEO_MAP_FROM == 2
		texture VideoMap : ANIMATEDTEXTURE<string ResourceName = VIDEO_MAP_FILE;>;
	#elif VIDEO_MAP_FROM == 3
		shared texture2D DummyScreenTex : RenderColorTarget;
	#endif
	sampler VideoMapSamp = sampler_state
	{
#if VIDEO_MAP_FROM == 1 || VIDEO_MAP_FROM == 2
		texture = VideoMap;
#else
		texture = DummyScreenTex;
#endif
		MINFILTER = LINEAR; MAGFILTER = LINEAR; MipFilter = LINEAR; SRGBTexture = TRUE;
		ADDRESSU = CLAMP; ADDRESSV = CLAMP;
	};

	float4 FastBlur(sampler source, float2 uv, float2 offset, float level)
	{
		float sz = pow(2.0, level);
		float mip = level + 1.0;

		float4 a = tex2Dlod(source, float4(uv + sz * float2(-1.5, -0.5) * offset, 0, mip));
		float4 b = tex2Dlod(source, float4(uv + sz * float2( 0.5, -1.5) * offset, 0, mip));
		float4 c = tex2Dlod(source, float4(uv + sz * float2( 1.5,  0.5) * offset, 0, mip));
		float4 d = tex2Dlod(source, float4(uv + sz * float2(-0.5,  1.5) * offset, 0, mip));
		float4 e = tex2Dlod(source, float4(uv, 0, mip));

		float gamma = 2.2;

		float4 blurred = 0;
		blurred += pow(a, gamma) * 4.0;
		blurred += pow(b, gamma) * 4.0;
		blurred += pow(c, gamma) * 4.0;
		blurred += pow(d, gamma) * 4.0;
		blurred += pow(e, gamma);
		blurred /= 17;

		return blurred;
	}
#endif

void ShadingMaterial(MaterialParam material, float3 P, float3 V, float3 lightColor, inout float3 diffuse, inout float3 specular)
{
	float3 L = viewLightPosition - P;
	float3 Lw = RectangleDirection(L, viewLightRight, viewLightUp, viewLightDirection, LightRect);
	float3 L2 = normalize(Lw);

	float3 atten = lightColor;

	float3 points[4];
	LTC_InitRectPoints(viewLightPosition, viewLightRight, viewLightUp, LightWidth, LightHeight, points);

	diffuse = SubsurfaceShading(material, material.normal, L2, V) * saturate(dot(L2, material.normal));
#if VIDEO_MAP_FROM
	diffuse += LTC_EvaluateRectangle(VideoMapSamp, material.normal, V, P, viewLightDirection, points);
#else
	diffuse += LTC_EvaluateRectangle(material.normal, V, P, viewLightDirection, points);
#endif

	diffuse *= atten;

#if LIGHT_PARAMS_TYPE == 0
	#if VIDEO_MAP_FROM
		specular = LTC_EvaluateRectangle(VideoMapSamp, material.normal, V, P, viewLightDirection, points, material.smoothness, material.specular);
	#else
		specular = LTC_EvaluateRectangle(material.normal, V, P, viewLightDirection, points, material.smoothness, material.specular);
	#endif

	specular *= atten;
#endif
}

void GetGbufferParams(float2 coord, out MaterialParam material, out MaterialParam materialAlpha)
{
	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
}

void LightSourceVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float3 oTexcoord2 : TEXCOORD2,
	out float4 oPosition  : POSITION)
{
	oPosition = float4(CoordToPos(Texcoord), 0, 1);
	oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
	oTexcoord1 = -mul(oPosition, matProjectInverse);
	oTexcoord2 = hsv2rgb(LightColor);
	oTexcoord2 = ColorTemperature(oTexcoord2, LightTemperature);
}

void LightSourcePS(
	in float2 coord : TEXCOORD0, 
	in float3 viewdir : TEXCOORD1,
	in float3 lightColor : TEXCOORD2,
	in float2 screen : SV_POSITION,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(coord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, lightColor, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, lightColor, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);

#if SHADOW_MAP_FROM > 0
	clip(sum(oColor0 + oColor1 + oColor2) - 1e-5);

	float4 proj = mul(float4(P2, 1), matLightProjectFromCameraView);
	proj = ComputeScreenPos(proj);
	proj.xy /= proj.w;
	proj.xy += ShadowMapOffset;

	float receiverDepth = mul(float4(P2, 1), matLightProjectFromCameraView).z;
	receiverDepth -= 1e-3 * proj.w;

	float shadow = ShadingShadow(proj.xy, proj.w, receiverDepth, LightRadius, PseudoRandom(screen));
	oColor0 *= shadow;
	oColor1 *= shadow;
	oColor2 *= shadow;
#endif
}

void LightSourceShadowlessPS(
	in float2 coord : TEXCOORD0, 
	in float3 viewdir : TEXCOORD1,
	in float3 lightColor : TEXCOORD2,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(coord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, lightColor, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, lightColor, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

technique MainTech0<string MMDPass = "object";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = NONE;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
	}
}

technique MainTecBS0<string MMDPass = "object_ss";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = NONE;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourcePS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}
