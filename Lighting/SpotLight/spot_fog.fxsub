#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/Shadow.fxsub"
#include "../../../shader/Color.fxsub"
#include "../../../shader/Packing.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/DeclareGbufferTexture.fxsub"
#include "../../../shader/PhaseFunctions.fxsub"

float mHP : CONTROLOBJECT<string name = "(self)"; string item = "H+";>;
float mSP : CONTROLOBJECT<string name = "(self)"; string item = "S+";>;
float mVP : CONTROLOBJECT<string name = "(self)"; string item = "V+";>;
float mVM : CONTROLOBJECT<string name = "(self)"; string item = "V-";>;
float mTemperatureP : CONTROLOBJECT<string name = "(self)"; string item = "Temperature+";>;
float mTemperatureM : CONTROLOBJECT<string name = "(self)"; string item = "Temperature-";>;
float mRangeP : CONTROLOBJECT<string name="(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name="(self)"; string item = "Range-";>;
float mAngleP : CONTROLOBJECT<string name="(self)"; string item = "Angle+";>;
float mAngleM : CONTROLOBJECT<string name="(self)"; string item = "Angle-";>;
float mBlink : CONTROLOBJECT<string name="(self)"; string item = "Blink";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float mAttenuationBulbM : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb-";>;
float mMiePhaseP : CONTROLOBJECT<string name="(self)"; string item = "MiePhase+";>;
float mMiePhaseM : CONTROLOBJECT<string name="(self)"; string item = "MiePhase-";>;
float mMieDensityP : CONTROLOBJECT<string name="(self)"; string item = "MieDensity+";>;
float mMieDensityM : CONTROLOBJECT<string name="(self)"; string item = "MieDensity-";>;
float mMieIntensityP : CONTROLOBJECT<string name="(self)"; string item = "MieIntensity+";>;
float mMieIntensityM : CONTROLOBJECT<string name="(self)"; string item = "MieIntensity-";>;

float3 mPosition : CONTROLOBJECT<string name="(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name = "(self)"; string item = "Direction";>;

static const float FogBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float FogAngle = radians(lerp(lerp(45.0, 60.0, mAngleP), 30.0, mAngleM));
static const float FogMiePhase  = lerp(lerp(FogMieParams.x, FogMieParams.z, mMiePhaseP), FogMieParams.y, mMiePhaseM);
static const float FogRange = lerp(lerp(FogRangeParams.x, FogRangeParams.z, mRangeP), FogRangeParams.y, mRangeM);
static const float FogDensity = lerp(lerp(FogDensityParams.x, FogDensityParams.y, mMieDensityP), FogDensityParams.z, mMieDensityM);
static const float FogIntensity = lerp(lerp(FogIntensityParams.x, FogIntensityParams.z, mMieIntensityP), FogIntensityParams.y, mMieIntensityM);
static const float FogAttenuationBulb = lerp(lerp(FogAttenuationBulbParams.x, FogAttenuationBulbParams.z, mAttenuationBulbP), FogAttenuationBulbParams.y, mAttenuationBulbM);
static const float FogTemperature = lerp(lerp(FogTemperatureLimits.x, FogTemperatureLimits.z, mTemperatureP), FogTemperatureLimits.y, mTemperatureM);

static const float3 FogPosition = mPosition;
static const float3 FogDirection = normalize(mDirection - mPosition);
static const float3 FogColor = float3(mHP, mSP, FogIntensity * FogBlink);

static const float4x4 matLightProject = CreatePerspectiveProject(FogAngle, 1, mLightPlaneNear, mLightPlaneFar);
static const float4x4 matLightView = CreateLightViewMatrix(FogDirection, FogPosition);
static const float4x4 matLightViewProject = mul(matLightView, matLightProject);

#if VOLUMETRIC_FOG_ENABLE
texture VolumetricMap: OFFSCREENRENDERTARGET <
	string Description = "Volumetric fog Rendering for SpotLight";
	int Width = FOG_SHADOW_MAP_SIZE;
	int Height = FOG_SHADOW_MAP_SIZE;
	string Format = "R16F";
	float4 ClearColor = { 1, 1, 1, 1 };
	float ClearDepth = 0.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*.pmx = ../spot_fog_shadow.fx;"
		"*.pmd = ../spot_fog_shadow.fx;"
		"* = hide";
>;
sampler VolumetricMapSamp = sampler_state {
	texture = <VolumetricMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static float2 ShadowmapOffset  = 0.5 / FOG_SHADOW_MAP_SIZE;
static float2 ShadowmapOffset2 = 1.0 / FOG_SHADOW_MAP_SIZE;
#endif

struct FogParams
{
	float3 FogPosition;
	float3 FogDirection;
	float3 FogColor;

	float FogAngle;
	float FogRange;
	float FogDensity;
	float FogIntensity;
	float FogMiePhase;
	float FogAttenuationBulb;

#if VOLUMETRIC_FOG_ENABLE
	float4x4 matLightView;
	float4x4 matLightProject;
#endif
};

float GetPhysicalLightAttenuation(float3 L, float radius, float attenuationBulbSize)
{
	const float invRadius = 1 / radius;
	float d = length(L);
	float fadeoutFactor = saturate((radius - d) * (invRadius / 0.2h));
	d = max(d - attenuationBulbSize, 0);
	float denom = 1 + d / attenuationBulbSize;
	float attenuation = fadeoutFactor * fadeoutFactor / (denom * denom);
	return attenuation;
}

float GetSpotLightAttenuation(float3 L, float3 Ld, float cosAngle, float radius = 2)
{
	float falloff = cosAngle / (saturate(dot(L, Ld)) + 1e-6);
	float attenuation = 1.0 - pow(saturate(falloff), radius);
	return attenuation;
}

float ComputeRayPlaneIntersection(float3 position, float3 viewdir, float3 n, float dist)
{
	float a = dot(n, viewdir);
	if (a > 0.0) return -1;

	float t = -(dot(position, n) + dist) / a;
	return t;
}

float2 ComputeRayConeIntersection(float3 position, float3 viewdir, float3 center, float3 axis, float angle, float height)
{
	float3 origin = position - center;

	float A = dot(origin, viewdir);
	float B = dot(origin, axis);

	float cosTheta = dot(viewdir, axis);

	float a = cosTheta * cosTheta - angle * angle;
	float b = cosTheta * B - A * angle * angle;
	float c = B * B - dot(origin, origin) * angle * angle;

	float det = b * b - a * c;
	if (det < 0.0)
	{
		return -1;
	}
	else
	{
		det = sqrt(det);
		float t1 = (-b + det);
		float t2 = (-b - det);
		float2 minimaxIntersections = float2(t1, t2) / a;

		float3 cp = position + viewdir * minimaxIntersections.y - center;
		float h = dot(cp, axis);

		if (h <= 0.0 || h > height)
		{
			minimaxIntersections.y = ComputeRayPlaneIntersection(position, viewdir, -axis, height);
		}

		if (minimaxIntersections.x > minimaxIntersections.y)
		{
			minimaxIntersections.x = 0;
		}

		return minimaxIntersections;
	}
}

float ComputeOpticalDepth(FogParams param, float depth)
{
	return exp(-depth * param.FogDensity);
}

float HitShadowTest(FogParams param, sampler shadowMap, float2 shadowOffset, float4x4 matLightView, float4x4 matLightProject, float3 worldPosition)
{
	float4 proj = mul(float4(worldPosition, 1), matLightProject);
	proj.xy = PosToCoord(proj.xy / proj.w);
	proj.xy += shadowOffset;

	float linearDepth = mul(float4(worldPosition, 1), matLightView).z;
	return (1 - tex2Dlod(shadowMap, float4(proj.xy, 0, 0)).r) < proj.z ? 0 : 1;
}

float4 VolumetricFog(FogParams param, float3 V, float3 start, float3 end, float jitter, int stepNum = MULTI_VOLUMETRIC_SAMPLES)
{
	float3 sampleStep = (end - start) / stepNum;
	float3 sampleStart = start + sampleStep * jitter;

	float sampleLength = length(sampleStep);
	float sampleOpticalDepth = ComputeOpticalDepth(param, sampleLength);

	float scatteringMie = 0;
	float sactteringDepth = 1;

	for (int i = 0; i < stepNum; i++, sampleStart += sampleStep, sactteringDepth *= sampleOpticalDepth)
	{
		float density = sampleLength;
#if VOLUMETRIC_FOG_ENABLE
		density *= HitShadowTest(param, VolumetricMapSamp, ShadowmapOffset, param.matLightView, param.matLightProject, sampleStart);
#endif
		if (density > 0)
		{
			float3 L = sampleStart - param.FogPosition;
			float3 Lnormalized = normalize(L);

			float scattering = GetPhysicalLightAttenuation(L, param.FogRange, param.FogAttenuationBulb);
			scattering *= GetSpotLightAttenuation(Lnormalized, param.FogDirection, param.FogAngle);
			scattering *= density;
			scattering *= sampleOpticalDepth;
			scattering *= sactteringDepth;

			scatteringMie += scattering;
		}
	}

	float scattering = scatteringMie;
	scattering *= param.FogIntensity;

#if VOLUMETRIC_FOG_ANISOTROPY == 1
	scattering *= ComputePhaseMieHG(dot(-V, param.FogDirection), param.FogMiePhase) * PI;
#endif

	return float4(param.FogColor * scattering + scattering * jitter / 255.0f, scattering * param.FogIntensity);
}

void VolumetricFogVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float3 oTexcoord2 : TEXCOORD2,
	out float4 oPosition  : POSITION)
{
	Position.xyz = FogPosition + Normal * FogRange;
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
	oTexcoord1 = Position.xyz - CameraPosition;
	oTexcoord2 = hsv2rgb(FogColor);
	oTexcoord2 = ColorTemperature(oTexcoord2, FogTemperature);
}

float4 VolumetricFogPS(
	in float4 texcoord : TEXCOORD0, 
	in float3 viewdir : TEXCOORD1,
	in float3 fogColor : TEXCOORD2,
	in float4 screenPosition : SV_Position) : COLOR
{
	FogParams param;
	param.FogPosition = FogPosition;
	param.FogDirection = FogDirection;
	param.FogAngle = cos(FogAngle);
	param.FogRange = FogRange;
	param.FogIntensity = FogIntensity;
	param.FogColor = fogColor;
	param.FogMiePhase = FogMiePhase;
	param.FogAttenuationBulb = FogAttenuationBulb;
	param.FogDensity = FogDensity;

#if VOLUMETRIC_FOG_ENABLE
	param.matLightView = matLightView;
	param.matLightProject = matLightViewProject;
#endif

	float3 V = normalize(viewdir);
	float2 intersections = ComputeRayConeIntersection(CameraPosition, V, param.FogPosition, param.FogDirection, param.FogAngle, param.FogRange);
	clip(dot(max(0, intersections), 1) - 1e-5);

	float linearDepth = SampleLinearEyeDepth(texcoord.xy / texcoord.w);
	clip(linearDepth - intersections.x);

	float3 start = CameraPosition + V * max(0, intersections.x);
	float3 end = CameraPosition + V * min(linearDepth, intersections.y);

	return VolumetricFog(param, V, start, end, PseudoRandom(screenPosition.xy * (time + PI)));
}

technique MainTechBS0<string MMDPass = "object_ss"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 VolumetricFogVS();
		PixelShader  = compile ps_3_0 VolumetricFogPS();
	}
}

technique DepthTech<string MMDPass = "object";>{}
technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}