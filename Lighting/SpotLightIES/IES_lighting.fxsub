#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/Color.fxsub"
#include "../../../shader/Packing.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/BRDF.fxsub"
#include "../../../shader/arealight.fxsub"

#if SHADOW_MAP_FROM > 0
#	include "../../../shader/Poisson.fxsub"
#	include "../../../shader/Shadow.fxsub"
#endif

float mHP : CONTROLOBJECT<string name = "(self)"; string item = "H+";>;
float mSP : CONTROLOBJECT<string name = "(self)"; string item = "S+";>;
float mVP : CONTROLOBJECT<string name = "(self)"; string item = "V+";>;
float mVM : CONTROLOBJECT<string name = "(self)"; string item = "V-";>;
float mBlink : CONTROLOBJECT<string name = "(self)"; string item = "Blink";>;
float mRangeP : CONTROLOBJECT<string name = "(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name = "(self)"; string item = "Range-";>;
float mAngleP : CONTROLOBJECT<string name = "(self)"; string item = "Angle+";>;
float mAngleM : CONTROLOBJECT<string name = "(self)"; string item = "Angle-";>;
float mRadiusP : CONTROLOBJECT<string name = "(self)"; string item = "Radius+";>;
float mRadiusM : CONTROLOBJECT<string name = "(self)"; string item = "Radius-";>;
float mTemperatureP : CONTROLOBJECT<string name = "(self)"; string item = "Temperature+";>;
float mTemperatureM : CONTROLOBJECT<string name = "(self)"; string item = "Temperature-";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float mAttenuationBulbM : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb-";>;
float mMultiLightP : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight+";>;
float mMultiLightM : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight-";>;

float3 mPosition : CONTROLOBJECT<string name = "(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name = "(self)"; string item = "Direction";>;

static const float LightBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float LightAngle = radians(lerp(lerp(45.0f, 60.0f, mAngleP), 30.0f, mAngleM));
static const float LightRadius = lerp(lerp(lightRadiusLimits.x, lightRadiusLimits.z, mRadiusP), lightRadiusLimits.y, mRadiusM);
static const float LightRange = lerp(lerp(lightRangeParams.x, lightRangeParams.z, mRangeP), lightRangeParams.y, mRangeM);
static const float LightAttenuationBulb = lerp(lerp(lightAttenuationBulbParams.x, lightAttenuationBulbParams.z, mAttenuationBulbP), lightAttenuationBulbParams.y, mAttenuationBulbM);
static const float LightIntensity = lerp(lerp(lightIntensityParams.x, lightIntensityParams.z, mVP), lightIntensityParams.y, mVM);
static const float LightIntensity2 = lerp(lerp(mLightIntensityMin, mLightIntensityMax, mMultiLightP), 0, mMultiLightM);
static const float LightTemperature = lerp(lerp(lightTemperatureLimits.x, lightTemperatureLimits.z, mTemperatureP), lightTemperatureLimits.y, mTemperatureM);

static const float3 LightPosition = mPosition;
static const float3 LightDirection = normalize(mDirection - mPosition);
static const float3 LightColor = float3(mHP, mSP, LightIntensity * LightIntensity2 * LightBlink);

static const float3 viewLightPosition = mul(float4(mDirection, 1), matView).xyz;
static const float3 viewLightDirection = normalize(mul(-LightDirection, (float3x3)matView));

#if SHADOW_MAP_FROM > 0
texture ShadowMap: OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for SpotLight";
	string Format = "R32F";
	int2 Dimensions = {MULTI_SHADOW_MAP_SIZE, MULTI_SHADOW_MAP_SIZE};
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 0.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller*.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../IES_shadow.fx;"
		"*.pmd = ../IES_shadow.fx;"
		"* = hide";
>;

sampler ShadowMapSamp = sampler_state {
	texture = <ShadowMap>;
	MinFilter = POINT; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static float2 ShadowMapOffset  = 0.5 / MULTI_SHADOW_MAP_SIZE;
static float2 ShadowMapOffset2 = 1.0 / MULTI_SHADOW_MAP_SIZE;

static float4x4 matLightProject = CreatePerspectiveProject(LightAngle, 1, mLightPlaneNear, mLightPlaneFar);
static float4x4 matLightView = CreateLightViewMatrix(LightDirection, LightPosition);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static float4x4 matLightProjectFromCameraView = mul(matViewInverse, matLightViewProject);

#if defined(MULTI_SHADOW_PCSS)
float2 FindBlocker(sampler _ShadowTex, float2 uv, float depth, float2 searchRadius, float2 rotation)
{
    float blockerWeight = 0;
    float blockerDepthSum = 0.0;

    for (int i = 0; i < MULTI_SHADOW_BLOCKER_COUNT; i++)
    {
		float sampleDepth = 1 - tex2Dlod(_ShadowTex, float4(uv + Rotate(MULTI_SHADOW_BLOCKER_POISSON[i], rotation) * searchRadius, 0, 0)).r;
        if (sampleDepth < depth)
        {
            blockerDepthSum += sampleDepth;
            blockerWeight++;
        }
    }

    return float2(blockerDepthSum / max(1e-5, blockerWeight), blockerWeight);
}
#endif

float ShadingShadow(float3 P, float radius, float random)
{
	float4 proj = mul(float4(P, 1), matLightProjectFromCameraView);
	proj = ComputeScreenPos(proj);
	proj.xy /= proj.w;
	proj.xy += ShadowMapOffset;

	float linearDepth = proj.w;
	float receiverDepth = proj.z;

	float2 rotation = float2(cos(random * PI_2), sin(random * PI_2));

#if defined(MULTI_SHADOW_PCSS)
	float2 searchRegionRadius = SearchRegionRadius(radius, linearDepth, mLightPlaneNear);
	float2 blocker = FindBlocker(ShadowMapSamp, proj.xy, receiverDepth, searchRegionRadius, rotation);

	float2 penumbraRatio = PenumbraRadius(radius, receiverDepth, GetLinearDepth(blocker.x, mLightPlaneNear * 0.5, mLightPlaneFar));
	float2 filterSize = ProjectToLight(penumbraRatio, receiverDepth, mLightPlaneNear);

	[branch]
	if (blocker.y <= 0)
	{
		return 1;
	}
#else
	float2 filterSize = radius * 0.5;
#endif

	float shadow = 0;

	for (int i = 0; i < MULTI_SHADOW_POISSON_COUNT; i+=4)
	{
		float2 samplePoints[4];
		samplePoints[0] = Rotate(MULTI_SHADOW_POISSON[i], rotation);
		samplePoints[1] = Rotate(MULTI_SHADOW_POISSON[i+1], rotation);
		samplePoints[2] = Rotate(MULTI_SHADOW_POISSON[i+2], rotation);
		samplePoints[3] = Rotate(MULTI_SHADOW_POISSON[i+3], rotation);
		
		float4 sampleDepth;
		sampleDepth[0] = tex2Dlod(ShadowMapSamp, float4(proj.xy + samplePoints[0] * filterSize, 0, 0)).r;
		sampleDepth[1] = tex2Dlod(ShadowMapSamp, float4(proj.xy + samplePoints[1] * filterSize, 0, 0)).r;
		sampleDepth[2] = tex2Dlod(ShadowMapSamp, float4(proj.xy + samplePoints[2] * filterSize, 0, 0)).r;
		sampleDepth[3] = tex2Dlod(ShadowMapSamp, float4(proj.xy + samplePoints[3] * filterSize, 0, 0)).r;

		sampleDepth = 1 - sampleDepth;

		shadow += sum(saturate(exp((sampleDepth - receiverDepth) * mLightPlaneFar)));
	}

	return shadow / MULTI_SHADOW_POISSON_COUNT;
}
#endif

texture IESTexture<string ResourceName = LIGHT_PARAMS_FILE; int Miplevels = 1;>; 
sampler IESTextureSamp = sampler_state
{
	texture = <IESTexture>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU  = CLAMP; AddressV = CLAMP;
};

float3 ComputeIESLightProfile1D(float3 L, float3 Ld)
{
	L = mul(L, (float3x3)matViewInverse);
	float angle = (1 - acos(dot(L, Ld)) / PI);
	return tex2Dlod(IESTextureSamp, float4(angle, 0, 0, 0)).rgb;
}

void ShadingMaterial(MaterialParam material, float3 P, float3 V, float3 lightColor, float shadow, inout float3 diffuse, inout float3 specular)
{
	float3 L = viewLightPosition - P;
	float3 L2 = normalize(L);

	float3 atten = GetPhysicalLightAttenuation(L, LightRange, LightAttenuationBulb);
	atten *= GetSpotLightAttenuation(L2, viewLightDirection, LightAngle);
	atten *= ComputeIESLightProfile1D(L2, LightDirection);
	atten *= lightColor;

	float2x3 energy = SurfaceEnergy(material, material.normal, L2, V, shadow);
	diffuse = energy[0];
	diffuse *= atten;

#if LIGHT_PARAMS_TYPE == 0
	specular = energy[1];
	specular *= atten;
#endif
}

void GetGbufferParams(float4 texcoord, out MaterialParam material, out MaterialParam materialAlpha)
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
}

void LightSourceVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float3 oTexcoord2 : TEXCOORD2,
	out float4 oPosition  : POSITION)
{    
	Position.xyz = LightPosition + Normal * LightRange;
	oTexcoord1 = -mul(Position, matView);
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
	oTexcoord2 = hsv2rgb(LightColor);
	oTexcoord2 = ColorTemperature(oTexcoord2, LightTemperature);
}

void LightSourcePS(
	in float4 texcoord : TEXCOORD0,
	in float3 viewdir : TEXCOORD1,
	in float3 lightColor : TEXCOORD2,
	in float2 screen : SV_POSITION,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(texcoord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float shadow = 1;
#if SHADOW_MAP_FROM
	shadow = ShadingShadow(P2, LightRadius, PseudoRandom(screen));
	clip(shadow - 1e-5);
#endif

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, lightColor, shadow, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, lightColor, shadow, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

void LightSourceShadowlessPS(
	in float4 texcoord : TEXCOORD0,
	in float3 viewdir : TEXCOORD1,
	in float3 lightColor : TEXCOORD2,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(texcoord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, lightColor, 1, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, lightColor, 1, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

technique MainTech0<string MMDPass = "object";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
	}
}

technique MainTecBS0<string MMDPass = "object_ss";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourcePS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}
