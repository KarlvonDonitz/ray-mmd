#if SSDO_QUALITY == 1
#	define HBAO_DIRECTION_COUNT 4
#	define HBAO_SAMPLER_COUNT 4
#	define HBAO_BLUR_RADIUS 5
#elif SSDO_QUALITY == 2
#	define HBAO_DIRECTION_COUNT 6
#	define HBAO_SAMPLER_COUNT 4
#	define HBAO_BLUR_RADIUS 4
#elif SSDO_QUALITY == 3
#	define HBAO_DIRECTION_COUNT 8
#	define HBAO_SAMPLER_COUNT 4
#	define HBAO_BLUR_RADIUS 3
#elif SSDO_QUALITY == 4
#	define HBAO_DIRECTION_COUNT 6
#	define HBAO_SAMPLER_COUNT 8
#	define HBAO_BLUR_RADIUS 2
#elif SSDO_QUALITY == 5
#	define HBAO_DIRECTION_COUNT 8
#	define HBAO_SAMPLER_COUNT 8
#	define HBAO_BLUR_RADIUS 2
#elif SSDO_QUALITY == 6
#	define HBAO_DIRECTION_COUNT 10
#	define HBAO_SAMPLER_COUNT 8
#	define HBAO_BLUR_RADIUS 2
#else
#	define HBAO_DIRECTION_COUNT 4
#	define HBAO_SAMPLER_COUNT 4
#	define HBAO_BLUR_RADIUS 5
#endif

float Falloff(float distanceSquare, float maxRadius)
{
	float negInvRadius2 = -1.0 / (maxRadius * maxRadius);
	return distanceSquare * negInvRadius2 + 1.0;
}

float4 HorizonOcclusion(
	float2 uv,
	float3 viewNormal,
	float3 viewPosition,
	float2 direction,
	float  maxRadius,
	float  jitter,
	float  bias)
{
	float2 sampleStepDelta = direction * maxRadius / HBAO_SAMPLER_COUNT;
	float2 sampleDirection = direction + frac(jitter) * sampleStepDelta;
	float2 sampleTexelSize = _CameraColorTexture_TexelSize.xy * (ViewportSize.y / 1080);

	float4 sampleOcclustion = 0.0f;

	for (int j = 0; j < HBAO_SAMPLER_COUNT; j+=4)
	{
		float2 samplePoint[4];
		samplePoint[0] = round(sampleDirection); sampleDirection += sampleStepDelta;
		samplePoint[1] = round(sampleDirection); sampleDirection += sampleStepDelta;
		samplePoint[2] = round(sampleDirection); sampleDirection += sampleStepDelta;
		samplePoint[3] = round(sampleDirection); sampleDirection += sampleStepDelta;

		float2 sampleOffset[4];
		sampleOffset[0] = mad(samplePoint[0], sampleTexelSize, uv);
		sampleOffset[1] = mad(samplePoint[1], sampleTexelSize, uv);
		sampleOffset[2] = mad(samplePoint[2], sampleTexelSize, uv);
		sampleOffset[3] = mad(samplePoint[3], sampleTexelSize, uv);

		float3 samplePosition[4];
		samplePosition[0] = ComputeViewSpacePosition(sampleOffset[0], SampleLinearEyeDepth(sampleOffset[0] + ViewportOffset));
		samplePosition[1] = ComputeViewSpacePosition(sampleOffset[1], SampleLinearEyeDepth(sampleOffset[1] + ViewportOffset));
		samplePosition[2] = ComputeViewSpacePosition(sampleOffset[2], SampleLinearEyeDepth(sampleOffset[2] + ViewportOffset));
		samplePosition[3] = ComputeViewSpacePosition(sampleOffset[3], SampleLinearEyeDepth(sampleOffset[3] + ViewportOffset));

		float3 sampleDirection[4];
		sampleDirection[0] = samplePosition[0] - viewPosition;
		sampleDirection[1] = samplePosition[1] - viewPosition;
		sampleDirection[2] = samplePosition[2] - viewPosition;
		sampleDirection[3] = samplePosition[3] - viewPosition;

		float4 sampleLength2 = float4(
			dot(sampleDirection[0], sampleDirection[0]),
			dot(sampleDirection[1], sampleDirection[1]),
			dot(sampleDirection[2], sampleDirection[2]),
			dot(sampleDirection[3], sampleDirection[3]));

		float4 sampleLengthInv = rsqrt(sampleLength2);

		sampleDirection[0] *= sampleLengthInv[0];
		sampleDirection[1] *= sampleLengthInv[1];
		sampleDirection[2] *= sampleLengthInv[2];
		sampleDirection[3] *= sampleLengthInv[3];

		float4 sampleAngle = float4(
			dot(sampleDirection[0], viewNormal),
			dot(sampleDirection[1], viewNormal),
			dot(sampleDirection[2], viewNormal),
			dot(sampleDirection[3], viewNormal));

		float4 sampleFalloff = float4(
				Falloff(sampleLength2[0], maxRadius),
				Falloff(sampleLength2[1], maxRadius),
				Falloff(sampleLength2[2], maxRadius),
				Falloff(sampleLength2[3], maxRadius)
			);

		float4 sh = saturate(sampleAngle - bias) * saturate(sampleFalloff);

		sampleOcclustion.w += sum(sh);
		sampleOcclustion.xyz += sh.x * sampleDirection[0];
		sampleOcclustion.xyz += sh.y * sampleDirection[1];
		sampleOcclustion.xyz += sh.z * sampleDirection[2];
		sampleOcclustion.xyz += sh.w * sampleDirection[3];
	}

	return sampleOcclustion;
}

float4 HorizonBasedAmbientOcclusionFragment(in float4 uv : TEXCOORD0, in float2 screen : SV_POSITION) : COLOR
{
	float maxRadius = mAmbientOcclusionRadius;
	if (floor(fmod(screen.x, 2)) > 0) maxRadius *= 0.5;
	if (floor(fmod(screen.y, 2)) > 0) maxRadius *= 0.5;

	float2 samplePixel = screen / ViewportSize;
	float3 sampleNormal = SampleTransparentNormal(uv.xy);
	float3 samplePosition = ComputeViewSpacePosition(samplePixel, SampleLinearEyeDepth(uv.xy));
	float2 sampleRandom = float2(InterleavedGradientNoise(screen), PseudoRandom(screen));

	float alpha = PI_2 / HBAO_DIRECTION_COUNT;
	float maxRadiusPixels = mAmbientOcclusionMaxRadiusPixelPercentage * ViewportSize.y;
	float radius = clamp(maxRadius * log2(samplePosition.z) * atan(matProject._m11), HBAO_SAMPLER_COUNT, maxRadiusPixels);

	float4 occclusion = 0;

	[loop]
	for (int d = 0; d < HBAO_DIRECTION_COUNT; ++d)
	{
		float angle = alpha * (d + sampleRandom.x);

		float cosA, sinA;
		sincos(angle, sinA, cosA);

		float2 direction = float2(cos(angle), sin(angle));

		occclusion += HorizonOcclusion(samplePixel, sampleNormal, samplePosition, direction, radius, sampleRandom.y, mAmbientOcclusionBias);
	}

	occclusion *= (1.0f / (HBAO_SAMPLER_COUNT * HBAO_DIRECTION_COUNT));
	occclusion.xyz = mad(occclusion.xyz, 0.5, 0.5);

	occclusion.w = occclusion.w * tex2Dlod(SSAOMap_PointSampler, float4(uv.xy, 0, 0)).a;
	occclusion.w = 1 - occclusion.w;

	return occclusion;
}

float4 ScreenSpaceBilateralFilterFragment(
	in float2 uv : TEXCOORD0,
	in float3 viewdir : TEXCOORD1,
	uniform sampler _MainTex,
	uniform float2 _MainTex_TexelSize) : COLOR
{
	float center_d = SampleLinearEyeDepth(uv);

	float total_w = 1.0f;
	float4 total_c = tex2Dlod(_MainTex, float4(uv, 0, 0));

	float3 normal = SampleTransparentNormal(uv);

	float angle = pow2(saturate(dot(normal, normalize(viewdir))));

	float blurSigma = HBAO_BLUR_RADIUS * 0.5f;
	float blurFalloff = 1.0f / (2.0f * blurSigma * blurSigma);

	float2 offset1 = uv + _MainTex_TexelSize;
	float2 offset2 = uv - _MainTex_TexelSize;

	[unroll]
	for (int r = 1; r < HBAO_BLUR_RADIUS; ++r)
	{
		float2 depth = float2(SampleLinearEyeDepth(offset1), SampleLinearEyeDepth(offset2));
		float2 weight = exp2(-r * r * blurFalloff - pow2((depth - center_d) * mAmbientOcclusionBilateralSharpness));

		weight.x *= saturate(dot(SampleTransparentNormal(offset1), normal));
		weight.y *= saturate(dot(SampleTransparentNormal(offset2), normal));

		total_c += tex2Dlod(_MainTex, float4(offset1, 0, 0)) * weight.x;
		total_c += tex2Dlod(_MainTex, float4(offset2, 0, 0)) * weight.y;

		total_w += sum(weight);

		offset1 += _MainTex_TexelSize;
		offset2 -= _MainTex_TexelSize;
	}

	return total_c / total_w;
}