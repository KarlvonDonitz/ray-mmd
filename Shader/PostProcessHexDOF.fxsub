#define DOF_BLUR_RADIUS 10
#define DOF_POSSION_SAMPLES 36

static const float mFstop = lerp(lerp(1.0, 16.0, mFstopP), 0.1, mFstopM);
static const float mFocalLength = lerp(lerp(35.0, 70.0, mFocalLengthP), 1e-5, mFocalLengthM);
static const float mFocalDistance = lerp(lerp(1, 100.0, mFocalDistanceP), -10.0, mFocalDistanceM);
static const float mFocalRegion = lerp(lerp(0.1, 5.0, mFocalRegionP), 0.0, mFocalRegionM);
static const float mFocalMapScale = 1.0;
static const float mAngle = 1.236;

texture _CameraFocalDistanceMap : RENDERCOLORTARGET<int2 Dimensions = {1, 1}; string Format="R16F";>;
texture _CameraFocalBlur1Map : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture _CameraFocalBlur2Map : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture _CameraCoCTexture : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture _CameraDepthOfNearMap : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture _CameraDepthOfFarMap : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture _CameraDepthOfFieldMap : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;

sampler _CameraFocalDistanceMap_PointSampler = sampler_state
{
	texture=<_CameraFocalDistanceMap>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraDepthOfFarMap_PointSampler = sampler_state
{
	texture=<_CameraDepthOfFarMap>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraDepthOfNearMap_PointSampler = sampler_state
{
	texture=<_CameraDepthOfNearMap>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraDepthOfFieldMap_PointSampler = sampler_state
{
	texture=<_CameraDepthOfFieldMap>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraFocalBlur1Map_PointSampler = sampler_state
{
	texture=<_CameraFocalBlur1Map>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraFocalBlur2Map_PointSampler = sampler_state
{
	texture=<_CameraFocalBlur2Map>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraCoCTexture_PointSampler = sampler_state
{
	texture=<_CameraCoCTexture>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraCoCTexture_LinearSampler = sampler_state
{
	texture=<_CameraCoCTexture>;
	MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};

float GetSampleRadius()
{
	return 0.2;
}

float2 GetSamplePoint()
{
	float4 proj = mul(float4(AcsPosition, 1), matViewProject);
	proj /= proj.w;
	proj.xy = PosToCoord(proj.xy);
	return 0.5 + float2(proj.x - 0.5, 0.0) * step(0.25, mMeasureMode);
}

float GetSampleCircleSDF(float2 uv, float2 pos, float radius)
{
	float d = length(pos - uv);
	float d1 = d - radius;
	float d2 = d - radius * 0.85;
	return saturate(saturate(d2) - saturate(d1));
}

float GetFocalDistance()
{
	float focalDistance = mFocalDistance + (distance(CameraPosition, AcsPosition) - 1) * step(0.99, mMeasureMode);
	return max(1, focalDistance);
}

float GetFocalAperture(float Fstop)
{
	float aperture = 1.0 / Fstop;
	return aperture;
}

float GetFocalLength(float mFocalLength, float focalDistance)
{
	return 1.0 / (1.0 / (0.5 * mFocalLength * matProject._22) + 1.0 / focalDistance);
}

float ComputeDepthCoC(float depth, float4 focalParams, float maxCoC = 10)
{
	// 35mm "full-frame" film format is 36mm x 24mm
	float sensorHeight = 0.024f;

	float S2 = depth;
	float S1 = focalParams.x; // focalDistance
	float F = focalParams.y; // focalLength
	float A = focalParams.z; // focalAperture
	float focalRegion = focalParams.w;

	// Calculate circle of confusion diameter
	// http://en.wikipedia.org/wiki/Circle_of_confusion
	float CoC = A * (max(abs(S2 - S1) - focalParams.w, 0) / S2) * (F / (S1 - F));

 	// put CoC into a % of the image sensor height
 	float percentOfSensor = CoC / sensorHeight;

	return clamp(percentOfSensor, 0, maxCoC) * sign(S2 - S1);
}

float CalcAdaptedLength(float adaptedLength, float len, float speed, float delta)
{
    return max(0, adaptedLength + (len - adaptedLength) * (1.0f - exp2(-speed * delta)));
}

float4 ComputeFocalDistancePS(in float2 coord : TEXCOORD0, uniform sampler source) : COLOR
{
	static const float2 poisson[DOF_POSSION_SAMPLES] =
	{
		float2(-1.0,  0.0), float2(-2.0,  0.0), float2(-3.0,  0.0), float2(3.0,  0.0), float2(2.0,  0.0), float2(1.0,  0.0),
		float2(-1.0, -1.0), float2(-2.0, -1.0),	float2(-3.0, -1.0), float2(0.0, -1.0), float2(3.0, -1.0), float2(2.0, -1.0), float2(1.0, -1.0),
		float2(-1.0,  1.0), float2(-2.0,  1.0), float2(-3.0,  1.0), float2(0.0,  1.0), float2(3.0,  1.0), float2(2.0,  1.0), float2(1.0,  1.0),
		float2(-2.0,  2.0), float2(-1.0,  2.0), float2( 0.0,  2.0), float2(1.0,  2.0), float2(2.0,  2.0),
		float2(-2.0, -2.0), float2(-1.0, -2.0), float2( 0.0, -2.0), float2(1.0, -2.0), float2(2.0, -2.0),
		float2(-1.0,  3.0), float2( 0.0,  3.0), float2( 1.0,  3.0),
		float2(-1.0, -3.0), float2( 0.0, -3.0), float2( 1.0, -3.0),
	};

	const float2 sampleRadius = GetSampleRadius() / float2(ViewportAspect * 3, 3.0);
	const float2 samplePoint = GetSamplePoint();

	float minDepth = 65535;

	[loop]
	for (int i = 0; i < DOF_POSSION_SAMPLES; i++)
	{
		float depth = tex2Dlod(Gbuffer8Map, float4(samplePoint + poisson[i] * sampleRadius, 0, 0)).r;
		minDepth = min(minDepth, depth);
	}

	float2 avgDepth = 0;

	[loop]
	for (int j = 0; j < DOF_POSSION_SAMPLES; j++)
	{
		float depth = tex2Dlod(Gbuffer8Map, float4(samplePoint + poisson[j] * sampleRadius, 0, 0)).r;
		avgDepth += float2(depth, 1) * exp2(-abs(depth - minDepth));
	}

	float distnace = avgDepth.x / avgDepth.y;
	return lerp(distnace + mFocalDistance - 1, GetFocalDistance(), step(0.5, mMeasureMode));
}

float4 ComputeDepthBokehVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1) : POSITION
{
	float focalDistance = tex2Dlod(_CameraFocalDistanceMap_PointSampler, float4(0.5,0.5, 0, 0)).r;
	float focalLength = GetCamraFocalLength() / 100.0f;
	float focalAperture = GetFocalAperture(mFstop);
	float4 focalCameraParams = float4(focalDistance, focalLength, focalAperture, mFocalRegion);

	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += ViewportOffset;
	oTexcoord1 = focalCameraParams;
	return Position;
}

float4 ComputeDepthBokehPS(
	in float2 uv : TEXCOORD0,
	in float4 focalCameraParams : TEXCOORD1,
	uniform sampler _MainTex) : COLOR
{
	float CoC = ComputeDepthCoC(tex2Dlod(Gbuffer8Map, float4(uv, 0, 0)).r, focalCameraParams);
	return float4(tex2Dlod(_MainTex, float4(uv, 0, 0)).rgb, CoC);
}

float4 ComputeHexagonalFarBlur(sampler source, sampler depth, float2 uv, float2 offset)
{
	float bleedingBias = 0.02;
	float bleedingMult = 30.f;

	float4 colors = 0.0f;

	float4 centerPixel = tex2D(source, uv.xy);
	float centerDepth = tex2D(depth, uv.xy).r;

	uv += offset * 0.5;

	for (int i = 0; i < DOF_BLUR_RADIUS; ++i, uv += offset)
	{
		float4 samplePixel = tex2Dlod(source, float4(uv, 0, 0));
		float sampleDepth = tex2Dlod(depth, float4(uv, 0, 0)).r;

		samplePixel.a = max(0, samplePixel.a);

		float weight = sampleDepth < centerDepth ? samplePixel.a / bleedingMult : 1.0f;
		weight = (centerPixel.a > (samplePixel.a + bleedingBias)) ? weight : 1.0f;
		weight = saturate(weight);

		colors.rgb += samplePixel.rgb * weight;
		colors.a += weight;
	}

	return colors / colors.a;
}

float4 ComputeHexBlurXVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float2 oTexcoord1 : TEXCOORD1,
	out float2 oTexcoord2 : TEXCOORD2) : POSITION
{
	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += ViewportOffset;
	oTexcoord1 = ViewportOffset2 * float2(cos(mAngle + PI / 2), sin(mAngle + PI / 2));
	oTexcoord2 = ViewportOffset2 * float2(cos(mAngle - PI / 6), sin(mAngle - PI / 6));
	return Position;
}

float4 ComputeHexBlurYVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float2 oTexcoord1 : TEXCOORD1,
	out float2 oTexcoord2 : TEXCOORD2) : POSITION
{
	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += ViewportOffset;
	oTexcoord1 = ViewportOffset2 * float2(cos(mAngle - PI / 6    ), sin(mAngle - PI / 6));
	oTexcoord2 = ViewportOffset2 * float2(cos(mAngle - PI / 6 * 5), sin(mAngle - PI / 6 * 5));
	return Position;
}

void ComputeHexBlurXFarPS(
	in float4 coord : TEXCOORD0,
	in float2 direction1 : TEXCOORD1,
	in float2 direction2 : TEXCOORD2,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	uniform sampler _MainTex)
{
	float CoC = tex2Dlod(_MainTex, float4(coord.xy, 0, 0)).a;
	clip(CoC);

	float2 blurDirection1 = direction1 * CoC;
	float2 blurDirection2 = direction2 * CoC;

	float4 color0 = ComputeHexagonalFarBlur(_MainTex, Gbuffer8Map, coord.xy, blurDirection1);
	float4 color1 = ComputeHexagonalFarBlur(_MainTex, Gbuffer8Map, coord.xy, blurDirection2);

	oColor0 = float4(color0.rgb, CoC);
	oColor1 = float4(color0.rgb + color1.rgb, CoC);
}

float4 ComputeHexBlurYFarPS(
	in float4 coord : TEXCOORD0,
	in float2 direction1 : TEXCOORD1,
	in float2 direction2 : TEXCOORD2,
	uniform sampler bokeh,
	uniform sampler vertical,
	uniform sampler diagonal) : COLOR
{
	float CoC = tex2Dlod(bokeh, float4(coord.xy, 0, 0)).a;
	clip(CoC);

	float2 blurDirection1 = direction1 * CoC;
	float2 blurDirection2 = direction2 * CoC;

	float4 color1 = ComputeHexagonalFarBlur(vertical, Gbuffer8Map, coord.xy, blurDirection1);
	float4 color2 = ComputeHexagonalFarBlur(diagonal, Gbuffer8Map, coord.xy, blurDirection2);

   	return float4((color1.rgb + color2.rgb) * (1.0f / 3.0f), CoC);
}

float4 ComputeNearDownPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float4 coords[4];
	coords[0] = float4(coord, 0, 0);
	coords[1] = float4(coord + float2(1.0, 0.0) * offset, 0, 0);
	coords[2] = float4(coord + float2(0.0, 1.0) * offset, 0, 0);
	coords[3] = float4(coord + float2(1.0, 1.0) * offset, 0, 0);

	float4 colors[4];
	colors[0] = tex2Dlod(source, coords[0]);
	colors[1] = tex2Dlod(source, coords[1]);
	colors[2] = tex2Dlod(source, coords[2]);
	colors[3] = tex2Dlod(source, coords[3]);

	float4 CoC = float4(colors[0].w, colors[1].w, colors[2].w, colors[3].w);

	float4 color = 0;
	color.rgb += colors[0].rgb * abs(CoC.x);
	color.rgb += colors[1].rgb * abs(CoC.y);
	color.rgb += colors[2].rgb * abs(CoC.z);
	color.rgb += colors[3].rgb * abs(CoC.w);
	color.rgb /= dot(abs(CoC), 1.0f);

	color.a = CoC.x;
	if(abs(color.a) > CoC.y) color.a = CoC.y;
	if(abs(color.a) > CoC.z) color.a = CoC.z;
	if(abs(color.a) > CoC.w) color.a = CoC.w;
	if(color.a > 0)	color.a = dot(0.25f, max(0, CoC));
	color.a = (color.a);

	return min(color, float4(65535, 65535, 65535, 65535));
}

float4 ComputeSmoothingNearPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float weights[5] = {1.0/16.0, 2.0/16.0, 4.0/16.0, 2.0/16.0, 1.0/16.0};

	float4 CoCs = 0;
	float weight = 0;

	[unroll]
	for(int i = -2; i < 2; i++)
	{
		float4 stepCoC = tex2Dlod(source, float4(coord + offset * i, 0, 0));
		CoCs += weights[i + 2] * stepCoC;
		weight += weights[i + 2];
	}

	return CoCs / weight;
}

float4 ComputeNearCoCPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform sampler sourceBlured) : COLOR
{
	float4 shrunk = tex2Dlod(source, float4(coord, 0, 0));
	float4 blured = tex2Dlod(sourceBlured, float4(coord, 0, 0));
	float weight = 2 * max(saturate((shrunk.a)), saturate((blured.a)));
	float4 color = lerp(shrunk, blured, saturate(weight));
	return color;
}

float4 ComputeNearSamllBlurPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float4 sum = 0;
	sum += tex2Dlod(source, float4(coord + float2( 0.5, -1.5) * offset, 0, 0));
	sum += tex2Dlod(source, float4(coord + float2(-1.5, -0.5) * offset, 0, 0));
	sum += tex2Dlod(source, float4(coord + float2(-0.5,  1.5) * offset, 0, 0));
	sum += tex2Dlod(source, float4(coord + float2( 1.5,  0.5) * offset, 0, 0));
	return sum / 4;
}

float4 ComputeBokehGatherVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1) : POSITION
{
	float focalDistance = tex2Dlod(_CameraFocalDistanceMap_PointSampler, float4(0.5,0.5, 0, 0)).r;
	float focalLength = GetCamraFocalLength() / 100.0f;
	float focalAperture = GetFocalAperture(mFstop);
	float4 focalCameraParams = float4(focalDistance, focalLength, focalAperture, mFocalRegion);

	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += float2(0.5, 0.5) / (ViewportSize * mFocalMapScale);
	oTexcoord0.zw += ViewportOffset;
	oTexcoord1 = focalCameraParams;

	return Position;
}

float4 ComputeBokehFarGatherPS(in float2 coord : TEXCOORD0, uniform sampler bokeh, uniform sampler source) : COLOR
{
	float4 samp1 = tex2Dlod(bokeh, float4(coord, 0, 0));
	float4 samp2 = tex2Dlod(source, float4(coord, 0, 0));

	float4 color;
	color.rgb = lerp(samp1.rgb, samp2.rgb, pow2(saturate((samp1.a) * 2)));
	color.a = samp1.a;

	return color;
}

float4 ComputeBokehGatherFinalPS(in float4 coord : TEXCOORD0, in float4 focalCameraParams : TEXCOORD1, uniform sampler bokeh, uniform sampler source, uniform float2 offset) : COLOR
{
	static const float2 poisson[DOF_POSSION_SAMPLES] =
	{
		float2(-1.0,  0.0), float2(-2.0,  0.0), float2(-3.0,  0.0), float2(3.0,  0.0), float2(2.0,  0.0), float2(1.0,  0.0),
		float2(-1.0, -1.0), float2(-2.0, -1.0),	float2(-3.0, -1.0), float2(0.0, -1.0), float2(3.0, -1.0), float2(2.0, -1.0), float2(1.0, -1.0),
		float2(-1.0,  1.0), float2(-2.0,  1.0), float2(-3.0,  1.0), float2(0.0,  1.0), float2(3.0,  1.0), float2(2.0,  1.0), float2(1.0,  1.0),
		float2(-2.0,  2.0), float2(-1.0,  2.0), float2( 0.0,  2.0), float2(1.0,  2.0), float2(2.0,  2.0),
		float2(-2.0, -2.0), float2(-1.0, -2.0), float2( 0.0, -2.0), float2(1.0, -2.0), float2(2.0, -2.0),
		float2(-1.0,  3.0), float2( 0.0,  3.0), float2( 1.0,  3.0),
		float2(-1.0, -3.0), float2( 0.0, -3.0), float2( 1.0, -3.0),
	};

	float4 CoC = tex2Dlod(bokeh, float4(coord.xy, 0, 0));
	float4 colors = float4(tex2Dlod(source, float4(coord.xy, 0, 0)).rgb, 1);

	offset *= (saturate(-(CoC.a)) * 2 + 1);

	[unroll]
	for(int i = 0; i < DOF_POSSION_SAMPLES; i++)
	{
		float4 color = tex2Dlod(source, float4(coord.xy + poisson[i] * offset, 0, 0));
		colors += color;
	}

	CoC.a = ComputeDepthCoC(tex2Dlod(Gbuffer8Map, float4(coord.zw, 0, 0)).r, focalCameraParams);

	float SDF = GetSampleCircleSDF(coord.xy * ViewportSize, ViewportSize * GetSamplePoint(), ViewportSize.y * GetSampleRadius()) * 0.5;

	colors.rgb /= float(DOF_POSSION_SAMPLES + 1);
	colors.rgb = lerp(colors.rgb, ((CoC.a > 0) ? float3(0,0.05,0.1) : float3(0.1,0.05,0)) * abs(CoC.a), mTestMode);
	colors.rgb = lerp(colors.rgb, float3(0.01, 0.4, 0.09), SDF * mTestMode * (1 - step(0.5, mMeasureMode)));
	colors.a = lerp(saturate(pow2(CoC.a * 2)), 1, mTestMode);

	return colors;
}