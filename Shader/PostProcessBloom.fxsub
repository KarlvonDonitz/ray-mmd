texture _BloomUpMap0 : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
texture _BloomUpMap1 : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture _BloomUpMap2 : RENDERCOLORTARGET<float2 ViewportRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture _BloomUpMap3 : RENDERCOLORTARGET<float2 ViewportRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture _BloomUpMap4 : RENDERCOLORTARGET<float2 ViewportRatio={0.03125, 0.03125}; string Format="A16B16G16R16F";>;
texture _BloomUpMap5 : RENDERCOLORTARGET<float2 ViewportRatio={0.015625, 0.015625}; string Format="A16B16G16R16F";>;
texture _BloomUpMap6 : RENDERCOLORTARGET<float2 ViewportRatio={0.0078125, 0.0078125}; string Format="A16B16G16R16F";>;
texture _BloomUpMap7 : RENDERCOLORTARGET<float2 ViewportRatio={0.00390625, 0.00390625}; string Format="A16B16G16R16F";>;
texture _BloomUpMap8 : RENDERCOLORTARGET<float2 ViewportRatio={0.001953125, 0.001953125}; string Format="A16B16G16R16F";>;
texture _BloomUpMap9 : RENDERCOLORTARGET<float2 ViewportRatio={0.0009765625, 0.0009765625}; string Format="A16B16G16R16F";>;
texture _BloomDownMap0 : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
texture _BloomDownMap1 : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture _BloomDownMap2 : RENDERCOLORTARGET<float2 ViewportRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture _BloomDownMap3 : RENDERCOLORTARGET<float2 ViewportRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture _BloomDownMap4 : RENDERCOLORTARGET<float2 ViewportRatio={0.03125, 0.03125}; string Format="A16B16G16R16F";>;
texture _BloomDownMap5 : RENDERCOLORTARGET<float2 ViewportRatio={0.015625, 0.015625}; string Format="A16B16G16R16F";>;
texture _BloomDownMap6 : RENDERCOLORTARGET<float2 ViewportRatio={0.0078125, 0.0078125}; string Format="A16B16G16R16F";>;
texture _BloomDownMap7 : RENDERCOLORTARGET<float2 ViewportRatio={0.00390625, 0.00390625}; string Format="A16B16G16R16F";>;
texture _BloomDownMap8 : RENDERCOLORTARGET<float2 ViewportRatio={0.001953125, 0.001953125}; string Format="A16B16G16R16F";>;
texture _BloomDownMap9 : RENDERCOLORTARGET<float2 ViewportRatio={0.0009765625, 0.0009765625}; string Format="A16B16G16R16F";>;

static float4 _BloomMap0_TexelSize = float4(2	 / ViewportSize, ViewportSize * 0.5);
static float4 _BloomMap1_TexelSize = float4(4	 / ViewportSize, ViewportSize * 0.25);
static float4 _BloomMap2_TexelSize = float4(8	 / ViewportSize, ViewportSize * 0.125);
static float4 _BloomMap3_TexelSize = float4(16	 / ViewportSize, ViewportSize * 0.0625);
static float4 _BloomMap4_TexelSize = float4(32	 / ViewportSize, ViewportSize * 0.03125);
static float4 _BloomMap5_TexelSize = float4(64	 / ViewportSize, ViewportSize * 0.015625);
static float4 _BloomMap6_TexelSize = float4(128	 / ViewportSize, ViewportSize * 0.0078125);
static float4 _BloomMap7_TexelSize = float4(256	 / ViewportSize, ViewportSize * 0.00390625);
static float4 _BloomMap8_TexelSize = float4(512	 / ViewportSize, ViewportSize * 0.001953125);
static float4 _BloomMap9_TexelSize = float4(1024 / ViewportSize, ViewportSize * 0.0009765625);

sampler _BloomDownMap0_PointSampler = sampler_state {
	texture = <_BloomDownMap0>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap0_PointSampler = sampler_state {
	texture = <_BloomUpMap0>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap1_PointSampler = sampler_state {
	texture = <_BloomDownMap1>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap1_PointSampler = sampler_state {
	texture = <_BloomUpMap1>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap2_PointSampler = sampler_state {
	texture = <_BloomDownMap2>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap2_PointSampler = sampler_state {
	texture = <_BloomUpMap2>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap3_PointSampler = sampler_state {
	texture = <_BloomDownMap3>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap3_PointSampler = sampler_state {
	texture = <_BloomUpMap3>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap4_PointSampler = sampler_state {
	texture = <_BloomDownMap4>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap4_PointSampler = sampler_state {
	texture = <_BloomUpMap4>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap5_PointSampler = sampler_state {
	texture = <_BloomDownMap5>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap5_PointSampler = sampler_state {
	texture = <_BloomUpMap5>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap6_PointSampler = sampler_state {
	texture = <_BloomDownMap6>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap6_PointSampler = sampler_state {
	texture = <_BloomUpMap6>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap7_PointSampler = sampler_state {
	texture = <_BloomDownMap7>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap7_PointSampler = sampler_state {
	texture = <_BloomUpMap7>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap8_PointSampler = sampler_state {
	texture = <_BloomDownMap8>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap8_PointSampler = sampler_state {
	texture = <_BloomUpMap8>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap9_PointSampler = sampler_state {
	texture = <_BloomDownMap9>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap9_PointSampler = sampler_state {
	texture = <_BloomUpMap9>;
	MinFilter = Point; MagFilter = Point; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap0_LinearSampler = sampler_state {
	texture = <_BloomDownMap0>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap0_LinearSampler = sampler_state {
	texture = <_BloomUpMap0>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap1_LinearSampler = sampler_state {
	texture = <_BloomDownMap1>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap1_LinearSampler = sampler_state {
	texture = <_BloomUpMap1>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap2_LinearSampler = sampler_state {
	texture = <_BloomDownMap2>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap2_LinearSampler = sampler_state {
	texture = <_BloomUpMap2>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap3_LinearSampler = sampler_state {
	texture = <_BloomDownMap3>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap3_LinearSampler = sampler_state {
	texture = <_BloomUpMap3>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap4_LinearSampler = sampler_state {
	texture = <_BloomDownMap4>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap4_LinearSampler = sampler_state {
	texture = <_BloomUpMap4>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap5_LinearSampler = sampler_state {
	texture = <_BloomDownMap5>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap5_LinearSampler = sampler_state {
	texture = <_BloomUpMap5>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap6_LinearSampler = sampler_state {
	texture = <_BloomDownMap6>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap6_LinearSampler = sampler_state {
	texture = <_BloomUpMap6>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap7_LinearSampler = sampler_state {
	texture = <_BloomDownMap7>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap7_LinearSampler = sampler_state {
	texture = <_BloomUpMap7>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap8_LinearSampler = sampler_state {
	texture = <_BloomDownMap8>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap8_LinearSampler = sampler_state {
	texture = <_BloomUpMap8>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomDownMap9_LinearSampler = sampler_state {
	texture = <_BloomDownMap9>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler _BloomUpMap9_LinearSampler = sampler_state {
	texture = <_BloomUpMap9>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};

#if HDR_STAR_MODE || HDR_FLARE_MODE
texture _GlareMap : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
sampler _GlareMap_LinearSampler = sampler_state {
	texture = <_GlareMap>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static float2 _GlareMap_TexelSize = 4 / ViewportSize;
#endif

void BloomPrefilterVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord1 : TEXCOORD0,
	out float4 oTexcoord2 : TEXCOORD1,
	out float4 oTexcoord3 : TEXCOORD2,
	out float4 oPosition : POSITION,
	uniform float2 _MainTex_TexelSize)
{
	oTexcoord1 = Texcoord.xyxy + _MainTex_TexelSize.xyxy * 0.5;
	oTexcoord2 = oTexcoord1.xyxy + float4(-1,0,1,0) * _MainTex_TexelSize.xyxy;
	oTexcoord3 = oTexcoord1.xyxy + float4(0,-1,0,1) * _MainTex_TexelSize.xyxy;

	oTexcoord1.zw = mExposure;
#if EYE_ADAPTATION
	float aveLum = tex2Dlod(_EyeLumAveMap_PointSampler, float4(0.5,0.5,0,0)).r;
	oTexcoord1.zw *= ComputeExposureISO(aveLum, 12.5);
#endif

	oPosition = Position;
}

float4 BloomPrefilterPS(
	in float4 uv0 : TEXCOORD0,
	in float4 uv1 : TEXCOORD1,
	in float4 uv2 : TEXCOORD2,
	uniform sampler _MainTex) : COLOR
{
	float3 color = tex2Dlod(_MainTex, float4(uv0.xy, 0, 0)).rgb;
	color = min(color, tex2Dlod(_MainTex, float4(uv1.xy, 0, 0)).rgb);
	color = min(color, tex2Dlod(_MainTex, float4(uv1.zw, 0, 0)).rgb);
	color = min(color, tex2Dlod(_MainTex, float4(uv2.xy, 0, 0)).rgb);
	color = min(color, tex2Dlod(_MainTex, float4(uv2.zw, 0, 0)).rgb);
	color = clamp(color, 0, 65535);

	color *= mExposure;

#if EYE_ADAPTATION > 0 || (HDR_TONEMAP_OPERATOR == 1)
	float aveLum = tex2Dlod(_EyeLumAveMap_PointSampler, float4(0.5,0.5,0,0)).r;
	color *= ComputeExposureISO(aveLum, 12.5);
#endif

	float brightness = max(max(color.r, color.g), color.b);
    float threshold = pow(mBloomThreshold * mBloomThreshold, 2.2);
    float thresholdKnee = threshold * 0.5f;
    float softness = clamp(brightness - threshold + thresholdKnee, 0.0, 2.0 * thresholdKnee);
    softness = (softness * softness) / (4.0 * thresholdKnee + 1e-4);
    float multiplier = max(brightness - threshold, softness) / max(brightness, 1e-4);
    float3 bloom = color * multiplier;

	bloom *= hsv2rgb(float3(mBloomColorAllHP, mBloomColorAllSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColorAllVP), 0, mBloomColorAllVM)));

	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(uv0.xy, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(uv0.xy, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(uv0.xy, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(uv0.xy, 0, 0));

	float3 emissive0 = DecodeGBufferEmissive(MRT3, MRT4);
	float3 emissive1 = DecodeGBufferEmissive(MRT7, MRT8);

	bloom += max(0.0, lerp(emissive0, emissive1, MRT8.a) - 1.0);

	return float4(bloom, 0);
}

float4 GaussianBlurBloomH(in float2 uv : TEXCOORD0, uniform sampler _MainTex, uniform float4 _MainTex_TexelSize) : COLOR
{
	float texelSize = _MainTex_TexelSize.x * 2;

	float4 c0 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 4.0, 0.0), 0, 0));
	float4 c1 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 3.0, 0.0), 0, 0));
	float4 c2 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 2.0, 0.0), 0, 0));
	float4 c3 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 1.0, 0.0), 0, 0));
	float4 c4 = tex2Dlod(_MainTex, float4(uv                               , 0, 0));
	float4 c5 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 1.0, 0.0), 0, 0));
	float4 c6 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 2.0, 0.0), 0, 0));
	float4 c7 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 3.0, 0.0), 0, 0));
	float4 c8 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 4.0, 0.0), 0, 0));

    float4 color = c0 * 0.01621622 + c1 * 0.05405405 + c2 * 0.12162162 + c3 * 0.19459459
                 + c4 * 0.22702703
                 + c5 * 0.19459459 + c6 * 0.12162162 + c7 * 0.05405405 + c8 * 0.01621622;

	return color;
}

float4 GaussianBlurBloomV(in float2 uv : TEXCOORD0, uniform sampler _MainTex, uniform float4 _MainTex_TexelSize) : COLOR
{
	float texelSize = _MainTex_TexelSize.y;

	float4 c0 = tex2Dlod(_MainTex, float4(uv - float2(0.0, texelSize * 3.23076923), 0, 0));
	float4 c1 = tex2Dlod(_MainTex, float4(uv - float2(0.0, texelSize * 1.38461538), 0, 0));
	float4 c2 = tex2Dlod(_MainTex, float4(uv                                      , 0, 0));
	float4 c3 = tex2Dlod(_MainTex, float4(uv + float2(0.0, texelSize * 1.38461538), 0, 0));
	float4 c4 = tex2Dlod(_MainTex, float4(uv + float2(0.0, texelSize * 3.23076923), 0, 0));

    float4 color = c0 * 0.07027027 + c1 * 0.31621622
                 + c2 * 0.22702703
                 + c3 * 0.31621622 + c4 * 0.07027027;

	return color;
}

float4 UpsampleBloomPS(
	in float2 uv : TEXCOORD,
	uniform int mipLevel,
	uniform sampler _MainTex, uniform float4 _MainTex_TexelSize,
	uniform sampler _MainTexLowMip, uniform float4 _MainTexLowMip_TexelSize) : COLOR
{
    float4 highMip = tex2Dlod(_MainTex, float4(uv + _MainTex_TexelSize.xy * 0.5, 0, 0));
    float4 lowMip = tex2D_bicubic(_MainTexLowMip, uv + _MainTexLowMip_TexelSize.xy * 0.5, _MainTexLowMip_TexelSize.zw);

	float maxSize = max(ViewportSize.x, ViewportSize.y);
	float iterations = floor(log2(maxSize) - 2);

	[flatten]
    if (mipLevel < iterations)
    	return lerp(highMip, lowMip, mBloomRadius);
    else
    	return highMip;
}

void GlarePrefilterVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord1 : TEXCOORD0,
	out float2 oTexcoord2 : TEXCOORD1,
	out float2 oTexcoord3 : TEXCOORD2,
	out float2 oTexcoord4 : TEXCOORD3,
	out float4 oPosition : POSITION,
	uniform float2 _MainTex_TexelSize)
{
	oPosition = Position;
	oTexcoord1 = Texcoord + _MainTex_TexelSize * 0.5;
	oTexcoord2 = oTexcoord1 + float2(_MainTex_TexelSize.x, 0);
	oTexcoord3 = oTexcoord1 + float2(_MainTex_TexelSize.x, _MainTex_TexelSize.y);
	oTexcoord4 = oTexcoord1 + float2(0, _MainTex_TexelSize.y);
}

float4 GlarePrefilterPS(
	in float2 uv0 : TEXCOORD0,
	in float2 uv1 : TEXCOORD1,
	in float2 uv2 : TEXCOORD2,
	in float2 uv3 : TEXCOORD3,
	uniform sampler _MainTex) : COLOR
{
	float4 color = tex2Dlod(_MainTex, float4(uv0, 0, 0));
	color += tex2Dlod(_MainTex, float4(uv1, 0, 0));
	color += tex2Dlod(_MainTex, float4(uv2, 0, 0));
	color += tex2Dlod(_MainTex, float4(uv3, 0, 0));
	return color * 0.25;
}