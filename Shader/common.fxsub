float time : TIME; // <bool SyncInEditMode=true;>
float elapsed : ELAPSEDTIME;

float2 MousePosition : MOUSEPOSITION;

float4x4 matWorld              : WORLD;
float4x4 matWorldInverse       : WORLDINVERSE;
float4x4 matWorldView          : WORLDVIEW;
float4x4 matWorldViewProject   : WORLDVIEWPROJECTION;
float4x4 matView               : VIEW;
float4x4 matViewInverse        : VIEWINVERSE;
float4x4 matProject            : PROJECTION;
float4x4 matProjectInverse     : PROJECTIONINVERSE;
float4x4 matViewProject        : VIEWPROJECTION;
float4x4 matViewProjectInverse : VIEWPROJECTIONINVERSE;

float3 CameraPosition  : POSITION<string Object = "Camera";>;
float3 CameraDirection : DIRECTION<string Object = "Camera";>;

float3 MainLightColor : SPECULAR< string Object = "Light";>;
float3 MainLightDirection : DIRECTION< string Object = "Light";>;

float4 MaterialDiffuse  : DIFFUSE<string Object = "Geometry";>;
float3 MaterialAmbient  : AMBIENT<string Object = "Geometry";>;
float3 MaterialSpecular : SPECULAR<string Object = "Geometry";>;
float3 MaterialToon     : TOONCOLOR;
float  MaterialPower    : SPECULARPOWER<string Object = "Geometry";>;

float2 ViewportSize : VIEWPORTPIXELSIZE;

float3 AcsPosition : CONTROLOBJECT<string name = "(self)";>;

static float2 ViewportOffset  = 0.5 / ViewportSize;
static float2 ViewportOffset2 = 1.0 / ViewportSize;
static float  ViewportAspect  = ViewportSize.x / ViewportSize.y;

uniform bool use_texture;
uniform bool use_subtexture;
uniform bool use_spheremap;
uniform bool use_toon;

uniform bool opadd;

#if SUN_SHADOW_QUALITY == 1
#	define CASCADE_SHADOW_MAP_SIZE 1024
#elif SUN_SHADOW_QUALITY == 2
#	define CASCADE_SHADOW_MAP_SIZE 2048
#elif SUN_SHADOW_QUALITY == 3
#	define CASCADE_SHADOW_MAP_SIZE 4096
#elif SUN_SHADOW_QUALITY == 4
#	define CASCADE_SHADOW_MAP_SIZE 8192
#endif

#if MULTI_VOLUMETIC_LIGHT_QUALITY == 0
#   define MULTI_VOLUMETRIC_SAMPLES 24
#elif MULTI_VOLUMETIC_LIGHT_QUALITY == 1
#   define MULTI_VOLUMETRIC_SAMPLES 48
#elif MULTI_VOLUMETIC_LIGHT_QUALITY == 2
#   define MULTI_VOLUMETRIC_SAMPLES 64
#elif MULTI_VOLUMETIC_LIGHT_QUALITY == 3
#   define MULTI_VOLUMETRIC_SAMPLES 84
#else
#   define MULTI_VOLUMETRIC_SAMPLES 24
#endif

#if MULTI_VOLUMETIC_SHADOW_QUALITY == 0
#   define FOG_SHADOW_MAP_SIZE 256
#elif MULTI_VOLUMETIC_SHADOW_QUALITY == 1
#   define FOG_SHADOW_MAP_SIZE 512
#elif MULTI_VOLUMETIC_SHADOW_QUALITY == 2
#   define FOG_SHADOW_MAP_SIZE 1024
#elif MULTI_VOLUMETIC_SHADOW_QUALITY == 3
#   define FOG_SHADOW_MAP_SIZE 2048
#else
#   define FOG_SHADOW_MAP_SIZE 256
#endif

#if SHADOW_MAP_QUALITY == 0
#   define MULTI_SHADOW_MAP_SIZE 1024
#elif SHADOW_MAP_QUALITY == 1
#   define MULTI_SHADOW_MAP_SIZE 2048
#elif SHADOW_MAP_QUALITY == 2
#   define MULTI_SHADOW_MAP_SIZE 4096
#elif SHADOW_MAP_QUALITY == 3
#   define MULTI_SHADOW_MAP_SIZE 8192
#else
#   define MULTI_SHADOW_MAP_SIZE 1024
#endif

float GetCameraFov()
{
	// matProject._m11 = 1.0f / tan((aperture / 180 * 3.1415926) * 0.5f)
    return degrees(atan(1.0f / matProject._m11) * 2.0);
}

float GetCameraFocalLength(float filmSize = 36.0f)
{
	return filmSize * matProject._m11 / 2.0f;
}