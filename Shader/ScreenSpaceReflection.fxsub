#if SSR_QUALITY == 1
#	define SSR_SAMPLER_COUNT 32
#	define SSR_BINARY_COUNT 5
#elif SSR_QUALITY == 2
#	define SSR_SAMPLER_COUNT 60
#	define SSR_BINARY_COUNT 5
#elif SSR_QUALITY >= 3
#	define SSR_SAMPLER_COUNT 128
#else
#	define SSR_SAMPLER_COUNT 32
#endif

static const float2 _CameraReflectionMaxBlurPixelPercentage = 512 * float2(ViewportAspect, 1);

static const float2 _CameraReflectionTexture0_TexelSize = 1 / ViewportSize;
static const float2 _CameraReflectionTexture1_TexelSize = 1 / _CameraReflectionMaxBlurPixelPercentage;
static const float2 _CameraReflectionTexture2_TexelSize = 2 / _CameraReflectionMaxBlurPixelPercentage;
static const float2 _CameraReflectionTexture3_TexelSize = 4 / _CameraReflectionMaxBlurPixelPercentage;
static const float2 _CameraReflectionTexture4_TexelSize = 8 / _CameraReflectionMaxBlurPixelPercentage;

shared texture _CameraReflectionTextureX0 : RENDERCOLORTARGET<float2 ViewportRatio = {1.0, 1.0}; string Format = "A16B16G16R16F";>;

texture _CameraReflectionTextureX1 : RENDERCOLORTARGET<float2 ViewportRatio = {0.5, 0.5}; string Format = "A16B16G16R16F";>;
texture _CameraReflectionTextureX2 : RENDERCOLORTARGET<float2 ViewportRatio = {0.25, 0.25}; string Format = "A16B16G16R16F";>;
texture _CameraReflectionTextureX3 : RENDERCOLORTARGET<float2 ViewportRatio = {0.125, 0.125}; string Format = "A16B16G16R16F";>;
texture _CameraReflectionTextureX4 : RENDERCOLORTARGET<float2 ViewportRatio = {0.0625, 0.0625}; string Format = "A16B16G16R16F";>;
texture _CameraReflectionTextureX1Temp : RENDERCOLORTARGET<float2 ViewportRatio = {0.5, 0.5}; string Format = "A16B16G16R16F";>;
texture _CameraReflectionTextureX2Temp : RENDERCOLORTARGET<float2 ViewportRatio = {0.25, 0.25}; string Format = "A16B16G16R16F";>;
texture _CameraReflectionTextureX3Temp : RENDERCOLORTARGET<float2 ViewportRatio = {0.125, 0.125}; string Format = "A16B16G16R16F";>;
texture _CameraReflectionTextureX4Temp : RENDERCOLORTARGET<float2 ViewportRatio = {0.0625, 0.0625}; string Format = "A16B16G16R16F";>;

sampler _CameraReflectionTextureX0_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX0>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX1_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX1>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX2_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX2>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX3_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX3>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX4_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX4>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX1Temp_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX1Temp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX2Temp_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX2Temp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX3Temp_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX3Temp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler _CameraReflectionTextureX4Temp_LinearSampler = sampler_state { texture = <_CameraReflectionTextureX4Temp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};

bool ScreenSpaceRayMarching(float3 viewPosition, float3 rayDirection, float rayLength, float jitter, out float3 hitPixel)
{
	float rayStep = 1.0 / (SSR_SAMPLER_COUNT - 1);
	float raySampleTime = jitter * rayStep + rayStep;

	float4 rayStartClip = mul(float4(viewPosition, 1), matProject);
	float4 rayEndClip = mul(float4(viewPosition + rayDirection * rayLength, 1), matProject);
	
	float4 rayStartScreen = ComputeScreenPos(rayStartClip);
	float4 rayEndScreen = ComputeScreenPos(rayEndClip);

	float4 rayStepScreen = rayEndScreen - rayStartScreen;

	float4 rayDepthClip = rayStartClip + mul(float4(0, 0, rayLength, 0), matProject);
	float4 rayDepthScreen = float4(rayDepthClip.xyz / rayDepthClip.w, rayDepthClip.w);

	float firstHitTime = -1.0;
	float compareTolerance = abs(rayDepthClip.w - rayStartClip.w) * rayStep * 0.5;

	for (int i = 0; i < SSR_SAMPLER_COUNT; i += 4)
	{
		float4 sampleLength = raySampleTime + float4(0,1,2,3) * rayStep;

		float4 samplePosition[4];
		samplePosition[0] = rayStartScreen + rayStepScreen * sampleLength.x;
		samplePosition[1] = rayStartScreen + rayStepScreen * sampleLength.y;
		samplePosition[2] = rayStartScreen + rayStepScreen * sampleLength.z;
		samplePosition[3] = rayStartScreen + rayStepScreen * sampleLength.w;

		float4 sampleDepth;
		sampleDepth.x = SampleLinearEyeDepth(samplePosition[0].xy / samplePosition[0].w + ViewportOffset);
		sampleDepth.y = SampleLinearEyeDepth(samplePosition[1].xy / samplePosition[1].w + ViewportOffset);
		sampleDepth.z = SampleLinearEyeDepth(samplePosition[2].xy / samplePosition[2].w + ViewportOffset);
		sampleDepth.w = SampleLinearEyeDepth(samplePosition[3].xy / samplePosition[3].w + ViewportOffset);

		float4 sampleDepthDiff = sampleDepth - float4(samplePosition[0].w, samplePosition[1].w, samplePosition[2].w, samplePosition[3].w);

		bool4 hit = abs(sampleDepthDiff + compareTolerance) < compareTolerance;
		if (any(hit))
		{
			float hitIndex = 3;
			hitIndex = hit[2] ? 2 : hitIndex;
			hitIndex = hit[1] ? 1 : hitIndex;
			hitIndex = hit[0] ? 0 : hitIndex;

			firstHitTime = raySampleTime + rayStep * hitIndex;
			break;
		}

		raySampleTime += rayStep * 4;
	}

	if (firstHitTime > 0)
	{
		for (int j = 0; j < SSR_BINARY_COUNT; j++)
		{
			float sampleLength = firstHitTime;
			float4 samplePosition = rayStartScreen + rayStepScreen * sampleLength;

			float sampleDepth = SampleLinearEyeDepth(samplePosition.xy / samplePosition.w + ViewportOffset);

			if (samplePosition.w > sampleDepth)
				firstHitTime -= rayStep * 0.25;
			else
				firstHitTime += rayStep * 0.25;
		}
	}

	float4 projPos = rayStartScreen + rayStepScreen * firstHitTime;
	projPos.xy /= projPos.w;

	hitPixel = float3(projPos.xy, firstHitTime);

	float2 borderCheck = abs(hitPixel.xy * 2 - 1) - 1;

	return borderCheck.x < 0.0 && borderCheck.y < 0.0 && firstHitTime > 0 ? true : false;
}

float4 ScreenSpaceReflectionTracingPS(in float4 uv : TEXCOORD0, in float3 viewdir : TEXCOORD1, in float2 screen : SV_POSITION) : COLOR 
{
	MaterialParam material = SampleOpacityGbuffer(uv.xy);

	float3 test = material.albedo + material.specular;
	clip(sum(test) - 1e-5);

	float sampleJitter = PseudoRandom(uv.zw);
	float sampleDistance = clamp(log2(material.linearDepth) * 10, 50, mSSRRangeMax);

	float3 view = normalize(-viewdir);

	float2 samplePixel = screen / ViewportSize;
	float3 samplePosition = ComputeViewSpacePosition(samplePixel, material.linearDepth);
	float4 sampleDirection = TangentToWorld(material.normal, HammersleySampleGGX(sampleJitter, SmoothnessToRoughness(material.smoothness)));
	float3 sampleReflect = normalize(reflect(view, material.normal));

	float atten = dot(sampleReflect, view);
	clip(atten - 1e-3);

	float3 hitPixel = 0;
	if (!ScreenSpaceRayMarching(samplePosition, sampleReflect, sampleDistance, sampleJitter, hitPixel))
		clip(-1);

	float2 boundary = abs(uv.xy * 2 - 1);
	float fadeDiffRcp = 1.0f / max(0.01, 1 - mSSRFadeStart);
	float fadeOnBorder = 1.0f - saturate((boundary.x - mSSRFadeStart) * fadeDiffRcp);
	fadeOnBorder *= 1.0f - saturate((boundary.y - mSSRFadeStart) * fadeDiffRcp);
	fadeOnBorder *= smoothstep(1.0f, 0.6, hitPixel.z);

	float4 diffuse = tex2Dlod(_CameraColorTempTexture_PointSampler, float4(hitPixel.xy, 0, 0));
	float4 specular = tex2Dlod(_CameraSpecularTexture_PointSampler, float4(hitPixel.xy, 0, 0));

	return float4(diffuse.rgb * SampleOpacityAlbedo(hitPixel.xy) + specular.rgb, fadeOnBorder);
}

float4 ScreenSpaceReflectionBlurH(in float2 uv : TEXCOORD0, uniform sampler _MainTex, uniform float2 _MainTex_TexelSize) : COLOR
{
	float texelSize = _MainTex_TexelSize.x * 2;

	float4 c0 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 4.0, 0.0), 0, 0));
	float4 c1 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 3.0, 0.0), 0, 0));
	float4 c2 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 2.0, 0.0), 0, 0));
	float4 c3 = tex2Dlod(_MainTex, float4(uv - float2(texelSize * 1.0, 0.0), 0, 0));
	float4 c4 = tex2Dlod(_MainTex, float4(uv                               , 0, 0));
	float4 c5 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 1.0, 0.0), 0, 0));
	float4 c6 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 2.0, 0.0), 0, 0));
	float4 c7 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 3.0, 0.0), 0, 0));
	float4 c8 = tex2Dlod(_MainTex, float4(uv + float2(texelSize * 4.0, 0.0), 0, 0));

    float4 color = c0 * 0.01621622 + c1 * 0.05405405 + c2 * 0.12162162 + c3 * 0.19459459
                 + c4 * 0.22702703
                 + c5 * 0.19459459 + c6 * 0.12162162 + c7 * 0.05405405 + c8 * 0.01621622;

	return color;
}

float4 ScreenSpaceReflectionBlurV(in float2 uv : TEXCOORD0, uniform sampler _MainTex, uniform float2 _MainTex_TexelSize) : COLOR
{
	float texelSize = _MainTex_TexelSize.y;

	float4 c0 = tex2Dlod(_MainTex, float4(uv - float2(0.0, texelSize * 3.23076923), 0, 0));
	float4 c1 = tex2Dlod(_MainTex, float4(uv - float2(0.0, texelSize * 1.38461538), 0, 0));
	float4 c2 = tex2Dlod(_MainTex, float4(uv                                      , 0, 0));
	float4 c3 = tex2Dlod(_MainTex, float4(uv + float2(0.0, texelSize * 1.38461538), 0, 0));
	float4 c4 = tex2Dlod(_MainTex, float4(uv + float2(0.0, texelSize * 3.23076923), 0, 0));

    float4 color = c0 * 0.07027027 + c1 * 0.31621622
                 + c2 * 0.22702703
                 + c3 * 0.31621622 + c4 * 0.07027027;

	return color;
}

float4 ScreenSpaceReflectionFinalPS(in float2 uv : TEXCOORD0, in float3 viewdir : TEXCOORD1) : COLOR
{
	MaterialParam material = SampleOpacityGbuffer(uv);

	float gloss = material.smoothness;
	float gloss2 = gloss * gloss;

	float weight = frac(min(gloss2, 0.9999) * 3);

	float4 refl0 = tex2Dlod(_CameraReflectionTextureX0_LinearSampler, float4(uv + _CameraReflectionTexture0_TexelSize, 0, 0));
	float4 refl1 = tex2Dlod(_CameraReflectionTextureX1_LinearSampler, float4(uv + _CameraReflectionTexture1_TexelSize, 0, 0));
	float4 refl2 = tex2Dlod(_CameraReflectionTextureX2_LinearSampler, float4(uv + _CameraReflectionTexture2_TexelSize, 0, 0));
	float4 refl3 = tex2Dlod(_CameraReflectionTextureX3_LinearSampler, float4(uv + _CameraReflectionTexture3_TexelSize, 0, 0));
	float4 refl4 = tex2Dlod(_CameraReflectionTextureX4_LinearSampler, float4(uv + _CameraReflectionTexture4_TexelSize, 0, 0));

	float4 threshold4 = float4(3.0f, 2.0f, 1.0f, 0.0f) / 4.0f;
	float4 weight4 = saturate((weight - threshold4) / 0.25);

	float4 color = 0;

	[branch]
	if (gloss2 > threshold4.x)
		color = lerp(refl1, refl0, weight4.x);
	else if (gloss2 > threshold4.y)
		color = lerp(refl2, refl1, weight4.y);
	else if (gloss2 > threshold4.z)
		color = lerp(refl3, refl2, weight4.z);
	else
		color = lerp(refl4, refl3, weight4.w);

	float3 N = material.normal;
	float3 V = normalize(viewdir);
	float3 fresnel = EnvironmentSpecularUnreal4(abs(dot(N, V)), gloss, material.specular);

	return float4(color.rgb * fresnel, color.a);
}