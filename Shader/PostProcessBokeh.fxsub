#define DOF_POSSION_RADIUS 30
#define DOF_POSSION_RINGS 5
#define DOF_POSSION_POINT_PER_RING 8
#define DOF_POSSION_SAMPLES (DOF_POSSION_RINGS * (DOF_POSSION_RINGS - 1) * DOF_POSSION_POINT_PER_RING / 2)

static const float4 _CameraCoCTexture_TexelSize = float4(1.0f / ViewportSize, ViewportSize);
static const float4 _CameraBokehTexture_TexelSize = float4(2.0f / ViewportSize, ViewportSize / 2);
static const float4 _CameraBokehBlurTexture_TexelSize = float4(2.0f / ViewportSize, ViewportSize / 2);

texture _CameraCoCTexture : RENDERCOLORTARGET<float2 ViewportRatio={1, 1}; string Format="R16F";>;
texture _CameraFocalDistanceTexture : RENDERCOLORTARGET<int2 Dimensions = {1, 1}; string Format="R16F";>;
texture _CameraBokehTexture : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F"; int Miplevels = 0;>;
texture _CameraBokehBlurTexture : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;

texture _CameraBokehKernelTexture : RenderColorTarget
<
	int Width = DOF_POSSION_SAMPLES;
	int Height = 1;
	bool AntiAlias = false;
	int Miplevels = 1;
	string Format="A16B16G16R16F";
>;

float4 _CameraBokehKernel[DOF_POSSION_SAMPLES] : TEXTUREVALUE <
	string TextureName = "_CameraBokehKernelTexture";
>;
float4 _CameraFocalDistance[1] : TEXTUREVALUE <
	string TextureName = "_CameraFocalDistanceTexture";
>;

sampler _CameraCoCTexture_PointSampler = sampler_state
{
	texture=<_CameraCoCTexture>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraCoCTexture_LinearSampler = sampler_state
{
	texture=<_CameraCoCTexture>;
	MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraBokehTexture_PointSampler = sampler_state
{
	texture=<_CameraBokehTexture>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraBokehTexture_LinearSampler = sampler_state
{
	texture=<_CameraBokehTexture>;
	MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=LINEAR;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraBokehBlurTexture_PointSampler = sampler_state
{
	texture=<_CameraBokehBlurTexture>;
	MinFilter=POINT; MagFilter=POINT; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};
sampler _CameraBokehBlurTexture_LinearSampler = sampler_state
{
	texture=<_CameraBokehBlurTexture>;
	MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE;
	AddressU=CLAMP; AddressV=CLAMP;
};

float CircleSDF(float2 uv, float2 pos, float radius)
{
	float d = length(pos - uv);
	float d1 = d - radius;
	float d2 = d - radius * 0.85;
	return saturate(saturate(d2) - saturate(d1));
}

float GetSampleRadius()
{
	return 0.1 * atan(matProject._m11);
}

float GetMaxBokehRadius(float maxRadius = DOF_POSSION_RADIUS)
{
	return maxRadius / 1080;
}

float2 GetSamplePoint()
{
	float4 proj = ComputeScreenPos(mul(float4(AcsPosition, 1), matViewProject));
	proj.xy /= proj.w;
	return lerp(0.5, proj.xy, step(0.25, mMeasureMode) && !any(saturate(abs(proj.xy * 2 - 1) - 1 - GetSampleRadius())));
}

float GetFocalDistance()
{
	float focalDistance = mFocalDistance + (distance(CameraPosition, AcsPosition) - 1) * step(0.99, mMeasureMode);
	return max(1, focalDistance);
}

float ComputeDepthCoC(float depth, float4 focalParams)
{
	float D = depth;
	float P = focalParams.x; // focalDistance
	float F = focalParams.y / 1000.0f; // focalLength
	float A = focalParams.y / focalParams.z; // focalAperture
	float focalRegion = focalParams.w;

	// Calculate circle of confusion diameter
	// http://en.wikipedia.org/wiki/Circle_of_confusion
	float CoC = A * (max(abs(D - P) - focalParams.w, 0) / D) * (F / (P - F));

	float sensorWidth = mSensorWidth * 0.001f;

	// put CoC into a % of the image sensor width
	float percentOfSensor = CoC / sensorWidth * sign(D - P);

	return clamp(percentOfSensor, -1.0, 1.0);
}

float4 ComputeFocalDistancePS(in float2 coord : TEXCOORD0) : COLOR
{
	const float2 sampleRadius = GetSampleRadius() / float2(ViewportAspect, 1.0);
	const float2 samplePoint = GetSamplePoint();

	float minDepth = 65535;
	float2 avgDepth = 0;

	[loop]
	for (int i = 0; i < 48; i++)
	{
		float depth = SampleLinearEyeDepth(samplePoint + Poisson48[i] * sampleRadius);
		minDepth = min(minDepth, depth);
	}

	[loop]
	for (int j = 0; j < 48; j++)
	{
		float depth = SampleLinearEyeDepth(samplePoint + Poisson48[j] * sampleRadius);
		avgDepth += float2(depth, 1) * exp2(-abs(depth - minDepth));
	}

	float distnace = avgDepth.x / avgDepth.y;

	return lerp(distnace + mFocalDistance - 1, GetFocalDistance(), step(0.5, mMeasureMode));
}

float2 GetBokehKernel(float ring, float sample, float bladeCount, float curvature, float rotation = 0)
{
	float bias = 1.f / DOF_POSSION_POINT_PER_RING;
	float radius = (ring + bias) / (DOF_POSSION_RINGS - 1.f + bias);
	float points = ring * DOF_POSSION_POINT_PER_RING;

	float phi = 2.f * PI * sample / points;

	float nt = cos(PI / bladeCount);
	float dt = cos(phi - (PI_2 / bladeCount) * floor((bladeCount * phi + PI) / PI_2));
	float r = radius * pow(nt / dt, curvature);
	float u = r * cos(phi - rotation);
	float v = r * sin(phi - rotation);

	return float2(u, v);
}

float4 ComputeBokehKernelPS(in float2 screen : SV_POSITION) : COLOR
{
	float i = screen.x / DOF_POSSION_POINT_PER_RING;
	float ring = floor((-1 + sqrt(1 + i * 8)) / 2) + 1;
	float ringHalf = ring * (DOF_POSSION_POINT_PER_RING / 2);
	float sample1 = screen.x - (ring - 1) * DOF_POSSION_POINT_PER_RING;
	float sample2 = sample1 >= ringHalf ? sample1 - ringHalf : sample1 + ringHalf;
	float bladeCount = floor(mBladeCount);
	float curvature = bladeCount > 9 ? 0 : 1;

	float2 kernel1 = GetBokehKernel(ring, sample1, bladeCount, curvature) / float2(ViewportAspect, 1.0);
	float2 kernel2 = GetBokehKernel(ring, sample2, bladeCount, curvature) / float2(ViewportAspect, 1.0);

	return float4(kernel1, kernel2);
}

float4 ComputeBokehWeightVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1) : POSITION
{
	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += ViewportOffset;
	oTexcoord1 = float4(_CameraFocalDistance[0].r, GetCameraFocalLength(mSensorWidth), mFstop, mFocalRegion);
	return Position;
}

float4 ComputeBokehWeightPS(
	in float2 uv : TEXCOORD0,
	in float4 focalCameraParams : TEXCOORD1) : COLOR
{
	return ComputeDepthCoC(tex2Dlod(_CameraColorTexture_PointSampler, float4(uv, 0, 0)).a, focalCameraParams);
}

float4 ComputeBokehPrefilterPS(
	in float2 uv : TEXCOORD0,
	in float4 focalCameraParams : TEXCOORD1,
	uniform sampler _MainTex,
	uniform float4 _MainTex_TexelSize) : COLOR
{
	float3 duv = _MainTex_TexelSize.xyx * float3(0.5, 0.5, -0.5);
	float2 uv0 = uv - duv.xy;
	float2 uv1 = uv - duv.zy;
	float2 uv2 = uv + duv.zy;
	float2 uv3 = uv + duv.xy;

	float3 c0 = tex2Dlod(_MainTex, float4(uv0, 0, 0)).xyz;
	float3 c1 = tex2Dlod(_MainTex, float4(uv1, 0, 0)).xyz;
	float3 c2 = tex2Dlod(_MainTex, float4(uv2, 0, 0)).xyz;
	float3 c3 = tex2Dlod(_MainTex, float4(uv3, 0, 0)).xyz;

	float coc0 = tex2Dlod(_CameraCoCTexture_PointSampler, float4(uv0, 0, 0)).x;
	float coc1 = tex2Dlod(_CameraCoCTexture_PointSampler, float4(uv1, 0, 0)).x;
	float coc2 = tex2Dlod(_CameraCoCTexture_PointSampler, float4(uv2, 0, 0)).x;
	float coc3 = tex2Dlod(_CameraCoCTexture_PointSampler, float4(uv3, 0, 0)).x;

	float w0 = abs(coc0) / (max(max(c0.x, c0.y), c0.z) + 1.0);
	float w1 = abs(coc1) / (max(max(c1.x, c1.y), c1.z) + 1.0);
	float w2 = abs(coc2) / (max(max(c2.x, c2.y), c2.z) + 1.0);
	float w3 = abs(coc3) / (max(max(c3.x, c3.y), c3.z) + 1.0);

	float3 avg = c0 * w0 + c1 * w1 + c2 * w2 + c3 * w3;
	avg /= max(w0 + w1 + w2 + w3, 1e-5);

	float cocMin = min(coc0, min(min(coc1, coc2), coc3));
	float cocMax = max(coc0, max(max(coc1, coc2), coc3));
	float coc = (-cocMin > cocMax ? cocMin : cocMax) * GetMaxBokehRadius();

	avg *= smoothstep(0, _MainTex_TexelSize.y * 2.0, abs(coc));

	return float4(avg, coc);
}

void ComputeBokehAccum(sampler _MainTex, float4 _MainTex_TexelSize, float4 samp0, float2 uv, float mip, inout float4 farAcc, inout float4 nearAcc)
{
	float4 samp = tex2Dlod(_MainTex, float4(uv, 0, mip));

	float farCoC = max(min(samp0.a, samp.a), 0.0);

	float margin = GetMaxBokehRadius(2);
	float farWeight = saturate((farCoC + margin) / margin);
	float nearWeight = saturate((-samp.a + margin) / margin);

	farAcc += float4(samp.rgb, 1.0) * farWeight;
	nearAcc += float4(samp.rgb, 1.0) * nearWeight * step(_MainTex_TexelSize.y, -samp.a);
}

void ComputeBokehAccum(sampler _MainTex, float4 _MainTex_TexelSize, float4 samp0, float2 uv, float2 disp, float mip, inout float4 farAcc, inout float4 nearAcc)
{
	float4 samp = tex2Dlod(_MainTex, float4(uv + disp, 0, mip));

	float farCoC = max(min(samp0.a, samp.a), 0.0);

	float dist = length(disp);
	float margin = GetMaxBokehRadius(2);
	float farWeight = saturate((farCoC - dist + margin) / margin);
	float nearWeight = saturate((-samp.a - dist + margin) / margin);

	farAcc += float4(samp.rgb, 1.0) * farWeight;
	nearAcc += float4(samp.rgb, 1.0) * nearWeight * step(_MainTex_TexelSize.y, -samp.a);
}

float4 ComputeBokehBlurPS(
	in float2 uv : TEXCOORD0,
	in float2 screen : SV_POSITION,
	uniform sampler _MainTex_PointSampler,
	uniform sampler _MainTex_LinearSampler,
	uniform float4 _MainTex_TexelSize) : COLOR
{
	float4 farAcc = 0.0;
	float4 nearAcc = 0.0;
	float4 samp0 = tex2Dlod(_MainTex_PointSampler, float4(uv, 0, 0));

	float maxRadius = GetMaxBokehRadius();
	float mip = min(4, abs(samp0.a) / maxRadius * DOF_POSSION_RADIUS / DOF_POSSION_POINT_PER_RING * 0.5);

	ComputeBokehAccum(_MainTex_LinearSampler, _MainTex_TexelSize, samp0, uv, mip, farAcc, nearAcc);

	[loop]
	for (int i = 0; i < DOF_POSSION_SAMPLES; i++)
	{
		float2 disp = _CameraBokehKernel[i].zw * maxRadius;
		ComputeBokehAccum(_MainTex_LinearSampler, _MainTex_TexelSize, samp0, uv, disp, mip, farAcc, nearAcc);
	}

	nearAcc.rgb /= max(1, nearAcc.a);
	farAcc.rgb /= max(1, farAcc.a);

	float alpha = saturate(nearAcc.a / DOF_POSSION_SAMPLES * PI);
	float3 rgb = lerp(farAcc.rgb, nearAcc.rgb, alpha);

	return float4(rgb, alpha);
}

float4 ComputeBokehFinalPS(
	in float2 uv : TEXCOORD0,
	uniform sampler _MainTex,
	uniform float4 _MainTex_TexelSize) : COLOR
{
	float4 dof = tex2D_bicubic(_MainTex, uv + _MainTex_TexelSize.xy * 0.5, _MainTex_TexelSize.zw);

	float coc = tex2Dlod(_CameraCoCTexture_PointSampler, float4(uv + _CameraCoCTexture_TexelSize.xy * 0.5, 0, 0)).r;

	float ffa = smoothstep(_MainTex_TexelSize.y * 2.0, _MainTex_TexelSize.y * 4.0, coc * GetMaxBokehRadius());
	float alpha = ffa + dof.a - ffa * dof.a;

	float2 samplePoint = GetSamplePoint();
	float SDF = CircleSDF(uv.xy * ViewportSize, ViewportSize * samplePoint, ViewportSize.y * GetSampleRadius()) * 0.5;
	dof.rgb = lerp(dof.rgb, (coc > 0 ? float3(0,0.05,0.1) : float3(0.1,0.05,0)) * abs(coc), mTestMode);
	dof.rgb = lerp(dof.rgb, float3(0.01, 0.4, 0.09), SDF * mTestMode * (1 - step(0.5, mMeasureMode)));

	return float4(dof.rgb, lerp(alpha, 1, SDF * mTestMode));
}