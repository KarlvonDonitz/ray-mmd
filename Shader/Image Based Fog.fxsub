#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/Color.fxsub"
#include "../../shader/Packing.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/VolumeRendering.fxsub"

float mEnvRotateX : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateX";>;
float mEnvRotateY : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateY";>;
float mEnvRotateZ : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateZ";>;
float mFogColorHP :  CONTROLOBJECT<string name="(self)"; string item = "FogColorH+";>;
float mFogColorSP :  CONTROLOBJECT<string name="(self)"; string item = "FogColorS+";>;
float mFogColorVP :  CONTROLOBJECT<string name="(self)"; string item = "FogColorV+";>;
float mFogColorVM :  CONTROLOBJECT<string name="(self)"; string item = "FogColorV-";>;
float mFogDensityP : CONTROLOBJECT<string name="(self)"; string item = "FogDensity+";>;
float mFogDensityM : CONTROLOBJECT<string name="(self)"; string item = "FogDensity-";>;
float mFogBaseHeightP : CONTROLOBJECT<string name="(self)"; string item = "FogBaseHeight+";>;
float mFogBaseHeightM : CONTROLOBJECT<string name="(self)"; string item = "FogBaseHeight-";>;
float mFogMaxHeightP : CONTROLOBJECT<string name="(self)"; string item = "FogMaxHeight+";>;
float mFogMaxHeightM : CONTROLOBJECT<string name="(self)"; string item = "FogMaxHeight-";>;
float mFogAttenDistanceP : CONTROLOBJECT<string name="(self)"; string item = "FogAttenDistance+";>;
float mFogAttenDistanceM : CONTROLOBJECT<string name="(self)"; string item = "FogAttenDistance-";>;

static const float FogDensity = lerp(lerp(mFogDensityLimit.x, mFogDensityLimit.y, mFogDensityP), mFogDensityLimit.z, mFogDensityM);
static const float FogBaseHeight = lerp(lerp(mFogBaseHeightLimit.x, mFogBaseHeightLimit.y, mFogBaseHeightP), mFogBaseHeightLimit.z, mFogBaseHeightM);
static const float FogMaxHeight = lerp(lerp(mFogMaximumHeightLimit.x, mFogMaximumHeightLimit.y, mFogMaxHeightP), mFogMaximumHeightLimit.z, mFogMaxHeightM);
static const float FogAttenDistance = lerp(lerp(mFogAttenuationDistanceLimit.x, mFogAttenuationDistanceLimit.y, mFogAttenDistanceP), mFogAttenuationDistanceLimit.z, mFogAttenDistanceM);

static const float3 FogColor = hsv2rgb(float3(mFogColorHP, mFogColorSP, lerp(lerp(1, 2, mFogColorVP), 0, mFogColorVM)));
static const float3x3 matTransform = CreateRotate(float3(mEnvRotateX, mEnvRotateY, mEnvRotateZ) * PI_2);

#if SKYBOX_FOG_ENABLE
texture MipFogMap<string ResourceName = SKYBOX_FOG_MAP_FILE;>;
sampler MipFogMapSamp = sampler_state {
	texture = <MipFogMap>;
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = LINEAR;
	ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};
#endif

float ComputeMipFogFactor(float z)
{
#if SKYBOX_FOG_TYPE == 0 || SKYBOX_FOG_TYPE == 1
    // factor = exp(-(density*z)^2)
    // -density * z computed at vertex
    return float(z * FogDensity);
#elif SKYBOX_FOG_TYPE == 2
    // factor = (end-z)/(end-start) = z * (-1/(end-start)) + (end/(end-start))
    float fogFactor = saturate(z * _MipFogFactorParams.z + _MipFogFactorParams.w);
    return float(fogFactor);
#else
    return 0.0;
#endif
}

void ImageBasedFogVertex(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float4 oPosition : POSITION)
{
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
	oTexcoord1 = Position.xyz;
}

float4 ImageBasedFogFragment(
	in float4 texcoord : TEXCOORD0,
	in float3 worldPosition  : TEXCOORD1) : COLOR0
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

	float3 V = -normalize(CameraPosition - worldPosition);
	float3 P = CameraPosition + V * material.linearDepth;

#if SKYBOX_FOG_TYPE == 0
	float fogFactor = ComputeMipFogFactor(material.linearDepth);
#elif SKYBOX_FOG_TYPE == 1
    float extinction = FogAttenDistance;
    float layerDepth = max(0.01f, FogMaxHeight - FogBaseHeight);
    float H = ScaleHeightFromLayerDepth(layerDepth);
    float heightFogExponents = float2(1.0f / H, H);

	float fogFactor = OpticalDepthHeightFog(extinction, FogBaseHeight, heightFogExponents, FogDensity, V.y, P.y, material.linearDepth);
#endif

	float mipFogFactor = fogFactor;
#if SKYBOX_FOG_DISCARD_SKY
	mipFogFactor *= step(0, sum(material.albedo + material.specular) - 1e-5);
#endif

	float3 mipFogColor = FogColor;

#if SKYBOX_FOG_ENABLE
	float mipLevel = ComputeFogMip(0.01, 5000, material.linearDepth, 4, SKYBOX_FOG_MIPMAP_LEVEL - 1);
	mipFogColor *= DecodeRGBT(tex2Dlod(MipFogMapSamp, float4(SampleLatlong(V), 0, mipLevel)));
#endif

	return float4(mipFogColor, mipFogFactor);
}

#define OBJECT_TEC(name, mmdpass)\
	technique name<string MMDPass = mmdpass;\
	> {\
		pass DrawObject {\
			ZEnable = false; ZWriteEnable = false;\
			AlphaBlendEnable = true; AlphaTestEnable = FALSE;\
			SrcBlend = ONE; DestBlend = ONE;\
			VertexShader = compile vs_3_0 ImageBasedFogVertex();\
			PixelShader  = compile ps_3_0 ImageBasedFogFragment();\
		}\
	}

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTec1, "object_ss")

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTec<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}