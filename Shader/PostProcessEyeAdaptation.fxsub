texture _EyeLumMap0 : RENDERCOLORTARGET<int2 Dimensions = {256, 256}; string Format = "R32F";>;
texture _EyeLumMap1 : RENDERCOLORTARGET<int2 Dimensions = {128, 128}; string Format = "R32F";>;
texture _EyeLumMap2 : RENDERCOLORTARGET<int2 Dimensions = {64, 64}; string Format = "R32F";>;
texture _EyeLumMap3 : RENDERCOLORTARGET<int2 Dimensions = {32, 32}; string Format = "R32F";>;
texture _EyeLumMap4 : RENDERCOLORTARGET<int2 Dimensions = {16, 16}; string Format = "R32F";>;
texture _EyeLumMap5 : RENDERCOLORTARGET<int2 Dimensions = {8, 8}; string Format = "R32F";>;
texture _EyeLumMap6 : RENDERCOLORTARGET<int2 Dimensions = {4, 4}; string Format = "R32F";>;
texture _EyeLumMap7 : RENDERCOLORTARGET<int2 Dimensions = {2, 2}; string Format = "R32F";>;
texture _EyeLumAveMap : RENDERCOLORTARGET<int2 Dimensions = {1, 1};	string Format = "R32F";>;

static float2 _EyeLumMap0_TexelSize = 1.0f / 256.0f;
static float2 _EyeLumMap1_TexelSize = 1.0f / 128.0f;
static float2 _EyeLumMap2_TexelSize = 1.0f / 64.0f;
static float2 _EyeLumMap3_TexelSize = 1.0f / 32.0f;
static float2 _EyeLumMap4_TexelSize = 1.0f / 16.0f;
static float2 _EyeLumMap5_TexelSize = 1.0f / 8.0f;
static float2 _EyeLumMap6_TexelSize = 1.0f / 4.0f;
static float2 _EyeLumMap7_TexelSize = 1.0f / 2.0f;

sampler _EyeLumMap0_PointSampler = sampler_state {
	texture = <_EyeLumMap0>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumMap1_PointSampler = sampler_state {
	texture = <_EyeLumMap1>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumMap2_PointSampler = sampler_state {
	texture = <_EyeLumMap2>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumMap3_PointSampler = sampler_state {
	texture = <_EyeLumMap3>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumMap4_PointSampler = sampler_state {
	texture = <_EyeLumMap4>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumMap5_PointSampler = sampler_state {
	texture = <_EyeLumMap5>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumMap6_PointSampler = sampler_state {
	texture = <_EyeLumMap6>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumMap7_PointSampler = sampler_state {
	texture = <_EyeLumMap7>;
	MinFilter = Point; MagFilter = Point; MipFilter = Point;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler _EyeLumAveMap_PointSampler = sampler_state {
	texture = <_EyeLumAveMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

float CalcAdaptedLum(float adaptedLum, float lum, float delta)
{
    return max(0, adaptedLum + (lum - adaptedLum) * (1.0f - exp2(-1.45 * delta)));
}

float ComputeExposureISO(float avgLum, float middleGray = 12.5)
{
	float EV100 = log2(avgLum * 100.0f / middleGray);
	float maxLuminance = 1.2f * exp2(EV100);
	float exposure = 0.5 / maxLuminance; // mExposureMin = 2.0, Need to multiply with 0.5
	return clamp(exposure, mExposureEyeAdapationMin, mExposureEyeAdapationMax);
}

float4 EyePrefilterPS(
	in float2 uv : TEXCOORD0,
	uniform sampler _MainTex,
	uniform float2 _MainTex_TexelSize) : COLOR
{
	float color = log(luminance(tex2Dlod(_MainTex, float4(uv, 0, 0)).rgb));
	color += log(luminance(tex2Dlod(_MainTex, float4(uv + float2(_MainTex_TexelSize.x, 0), 0, 0)).rgb));
	color += log(luminance(tex2Dlod(_MainTex, float4(uv + float2(0, _MainTex_TexelSize.y), 0, 0)).rgb));
	color += log(luminance(tex2Dlod(_MainTex, float4(uv + float2(_MainTex_TexelSize.x, _MainTex_TexelSize.y), 0, 0)).rgb));
	color *= 0.25;

	return color;
}

float4 EyeDownsamplePS(
	in float2 uv : TEXCOORD0,
	uniform sampler _MainTex,
	uniform float2 _MainTex_TexelSize) : COLOR
{
	float lum = tex2Dlod(_MainTex, float4(uv, 0, 0)).r;
	lum += tex2Dlod(_MainTex, float4(uv + float2(_MainTex_TexelSize.x, 0), 0, 0)).r;
	lum += tex2Dlod(_MainTex, float4(uv + float2(0, _MainTex_TexelSize.y), 0, 0)).r;
	lum += tex2Dlod(_MainTex, float4(uv + float2(_MainTex_TexelSize.x, _MainTex_TexelSize.y), 0, 0)).r;
	lum *= 0.25;

	return lum;
}

float4 EyeAdapationPS(
	in float2 uv : TEXCOORD0,
	uniform sampler _MainTex,
	uniform float2 _MainTex_TexelSize) : COLOR
{
	float lum = tex2Dlod(_MainTex, float4(uv, 0, 0)).r;
	lum += tex2Dlod(_MainTex, float4(uv + float2(_MainTex_TexelSize.x, 0), 0, 0)).r;
	lum += tex2Dlod(_MainTex, float4(uv + float2(0, _MainTex_TexelSize.y), 0, 0)).r;
	lum += tex2Dlod(_MainTex, float4(uv + float2(_MainTex_TexelSize.x, _MainTex_TexelSize.y), 0, 0)).r;
	lum = exp(lum * 0.25);

	if (!all(isfinite(lum)))
		lum = 1.0f;

	float adaptedLum = tex2Dlod(_EyeLumAveMap_PointSampler, float4(float2(0.5, 0.5), 0, 0)).r;
	if (!all(isfinite(adaptedLum)))
		adaptedLum = 1.0f;

	return CalcAdaptedLum(adaptedLum, lum, elapsed);
}