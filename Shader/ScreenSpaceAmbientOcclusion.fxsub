#if SSDO_QUALITY == 1
#	define SSDO_SAMPLER_COUNT 8
#	define SSDO_BLUR_RADIUS 6
#elif SSDO_QUALITY == 2
#	define SSDO_SAMPLER_COUNT 12
#	define SSDO_BLUR_RADIUS 6
#elif SSDO_QUALITY == 3
#	define SSDO_SAMPLER_COUNT 16
#	define SSDO_BLUR_RADIUS 6
#elif SSDO_QUALITY == 4
 // 3 rings 8 point
#	define SSDO_SAMPLER_COUNT 24
#	define SSDO_BLUR_RADIUS 6
#elif SSDO_QUALITY == 5
 // 4 rings 6 point
#	define SSDO_SAMPLER_COUNT 36
#	define SSDO_BLUR_RADIUS 6
#elif SSDO_QUALITY == 6
 // 4 rings 8 point
#	define SSDO_SAMPLER_COUNT 48
#	define SSDO_BLUR_RADIUS 6
#else
#	define SSDO_SAMPLER_COUNT 16
#	define SSDO_BLUR_RADIUS 6
#endif

#if SSDO_QUALITY >= 4
#	define SSDO_UNROLL
#else
#	define SSDO_UNROLL [unroll]
#endif

#if SSDO_QUALITY == 1 || SSDO_QUALITY == 2 || SSDO_QUALITY == 3
static const float2 SSDOKernel[16] = 
{
	float2( -0.14, -0.02 ),
	float2( -0.04, 0.24 ),
	float2( 0.36, 0.08 ),
	float2(-0.46, -0.08),
	float2( 0.26, -0.4 ),
	float2(-0.127, -0.347),
	float2( -0.44, -0.34 ),
	float2( -0.52, 0.4 ),
	float2(-0.226, 0.589),
	float2( 0.3, 0.68 ),
	float2( 0.7, 0.356),
	float2( 0.47, -0.287),
	float2( 0.84, -0.32 ),
	float2( 0.4, -0.74),
	float2(-0.338, -0.684),
	float2(-0.622, -0.415)
};
#elif SSDO_QUALITY == 4
static const float2 SSDOKernel[24] = 
{
	float2(0.529412, 0),
	float2(0.374351, 0.374351),
	float2(-2.31413e-08, 0.529412),
	float2(-0.374351, 0.374351),
	float2(-0.529412, -4.62827e-08),
	float2(-0.374351, -0.374351),
	float2(6.31317e-09, -0.529412),
	float2(0.374351, -0.374351),
	float2(1, 0),
	float2(0.92388, 0.382683),
	float2(0.707107, 0.707107),
	float2(0.382683, 0.92388),
	float2(-4.37114e-08, 1),
	float2(-0.382684, 0.92388),
	float2(-0.707107, 0.707107),
	float2(-0.92388, 0.382683),
	float2(-1, -8.74228e-08),
	float2(-0.92388, -0.382683),
	float2(-0.707107, -0.707107),
	float2(-0.382683, -0.92388),
	float2(1.19249e-08, -1),
	float2(0.382684, -0.923879),
	float2(0.707107, -0.707107),
	float2(0.92388, -0.382683)
};
#elif SSDO_QUALITY == 5
static const float2 SSDOKernel[36] =
{
	float2(0.368421, 0),
	float2(0.18421, 0.319062),
	float2(-0.184211, 0.319062),
	float2(-0.368421, -3.22084e-08),
	float2(-0.18421, -0.319062),
	float2(0.184211, -0.319062),
	float2(0.684211, 0),
	float2(0.592544, 0.342105),
	float2(0.342105, 0.592544),
	float2(-2.99078e-08, 0.684211),
	float2(-0.342105, 0.592544),
	float2(-0.592544, 0.342105),
	float2(-0.684211, -5.98156e-08),
	float2(-0.592544, -0.342105),
	float2(-0.342105, -0.592544),
	float2(8.15913e-09, -0.684211),
	float2(0.342106, -0.592544),
	float2(0.592544, -0.342105),
	float2(1, 0),
	float2(0.939693, 0.34202),
	float2(0.766044, 0.642788),
	float2(0.5, 0.866025),
	float2(0.173648, 0.984808),
	float2(-0.173648, 0.984808),
	float2(-0.5, 0.866025),
	float2(-0.766045, 0.642787),
	float2(-0.939693, 0.34202),
	float2(-1, -8.74228e-08),
	float2(-0.939693, -0.34202),
	float2(-0.766044, -0.642788),
	float2(-0.5, -0.866025),
	float2(-0.173648, -0.984808),
	float2(0.173649, -0.984808),
	float2(0.5, -0.866025),
	float2(0.766045, -0.642787),
	float2(0.939693, -0.34202)
};
#elif SSDO_QUALITY == 6
static const float2 SSDOKernel[48] = 
{
	float2(0.36, 0),
	float2(0.254558, 0.254558),
	float2(-1.57361e-08, 0.36),
	float2(-0.254558, 0.254558),
	float2(-0.36, -3.14722e-08),
	float2(-0.254558, -0.254559),
	float2(4.29296e-09, -0.36),
	float2(0.254559, -0.254558),
	float2(0.68, 0),
	float2(0.628238, 0.260225),
	float2(0.480833, 0.480833),
	float2(0.260225, 0.628238),
	float2(-2.97237e-08, 0.68),
	float2(-0.260225, 0.628238),
	float2(-0.480833, 0.480833),
	float2(-0.628238, 0.260225),
	float2(-0.68, -5.94475e-08),
	float2(-0.628238, -0.260225),
	float2(-0.480833, -0.480833),
	float2(-0.260225, -0.628238),
	float2(8.10892e-09, -0.68),
	float2(0.260225, -0.628238),
	float2(0.480833, -0.480832),
	float2(0.628238, -0.260225),
	float2(1, 0),
	float2(0.965926, 0.258819),
	float2(0.866025, 0.5),
	float2(0.707107, 0.707107),
	float2(0.5, 0.866025),
	float2(0.258819, 0.965926),
	float2(-4.37114e-08, 1),
	float2(-0.258819, 0.965926),
	float2(-0.5, 0.866025),
	float2(-0.707107, 0.707107),
	float2(-0.866026, 0.5),
	float2(-0.965926, 0.258819),
	float2(-1, -8.74228e-08),
	float2(-0.965926, -0.258819),
	float2(-0.866025, -0.5),
	float2(-0.707107, -0.707107),
	float2(-0.5, -0.866025),
	float2(-0.258819, -0.965926),
	float2(1.19249e-08, -1),
	float2(0.258819, -0.965926),
	float2(0.5, -0.866025),
	float2(0.707107, -0.707107),
	float2(0.866026, -0.5),
	float2(0.965926, -0.258819)
};
#endif

float4 ScreenSpaceAmbientOcclusionVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1) : POSITION
{
	const float mSSDOParams[4] = {2.0, 2.0, 0.03, 0.15};

	oTexcoord0.xy = Texcoord.xy + ViewportOffset;
	oTexcoord0.zw = Texcoord.xy * ViewportSize;
	oTexcoord1.xy = float2(mSSDOParams[0], mSSDOParams[1]) * float2(1, ViewportAspect);
	oTexcoord1.zw = float2(mSSDOParams[2], mSSDOParams[3]);
	return Position;
}

float4 ScreenSpaceAmbientOcclusion(
	float4 coord,
	float3 viewNormal,
	float3 viewPosition,
	float2 sampleRadius,
	float  jitter,
	float  bias)
{
	float2 sampleSinCos = float2(sin(jitter * PI_2), cos(jitter * PI_2));
	float4 sampleOcclustion = 0.0f;

	float2x2 sampleRotMat = { sampleSinCos.y, sampleSinCos.x, -sampleSinCos.x, sampleSinCos.y };

	SSDO_UNROLL
	for (int j = 0; j < SSDO_SAMPLER_COUNT; j+=4)
	{
		float2 sampleRotate[4];
		sampleRotate[0] = mul(SSDOKernel[j + 0], sampleRotMat) * sampleRadius * _CamraColorTexture_TexelSize;
		sampleRotate[1] = mul(SSDOKernel[j + 1], sampleRotMat) * sampleRadius * _CamraColorTexture_TexelSize;
		sampleRotate[2] = mul(SSDOKernel[j + 2], sampleRotMat) * sampleRadius * _CamraColorTexture_TexelSize;
		sampleRotate[3] = mul(SSDOKernel[j + 3], sampleRotMat) * sampleRadius * _CamraColorTexture_TexelSize;

		float2 sampleOffset[4];
		sampleOffset[0] = coord.xy + sampleRotate[0];
		sampleOffset[1] = coord.xy + sampleRotate[1];
		sampleOffset[2] = coord.xy + sampleRotate[2];
		sampleOffset[3] = coord.xy + sampleRotate[3];

		float4 sampleDepths;
		sampleDepths[0] = SampleLinearEyeDepth(sampleOffset[0]);
		sampleDepths[1] = SampleLinearEyeDepth(sampleOffset[1]);
		sampleDepths[2] = SampleLinearEyeDepth(sampleOffset[2]);
		sampleDepths[3] = SampleLinearEyeDepth(sampleOffset[3]);

		float3 samplePosition[4];
		samplePosition[0] = SampleViewPosition(sampleOffset[0], sampleDepths[0]);
		samplePosition[1] = SampleViewPosition(sampleOffset[1], sampleDepths[1]);
		samplePosition[2] = SampleViewPosition(sampleOffset[2], sampleDepths[2]);
		samplePosition[3] = SampleViewPosition(sampleOffset[3], sampleDepths[3]);

		float3 sampleDirection[4];
		sampleDirection[0] = samplePosition[0] - viewPosition;
		sampleDirection[1] = samplePosition[1] - viewPosition;
		sampleDirection[2] = samplePosition[2] - viewPosition;
		sampleDirection[3] = samplePosition[3] - viewPosition;

		float4 sampleLength2 = float4(
			dot(sampleDirection[0], sampleDirection[0]),
			dot(sampleDirection[1], sampleDirection[1]),
			dot(sampleDirection[2], sampleDirection[2]),
			dot(sampleDirection[3], sampleDirection[3]));

		float4 sampleLengthInv = rsqrt(sampleLength2);

		sampleDirection[0] *= sampleLengthInv[0];
		sampleDirection[1] *= sampleLengthInv[1];
		sampleDirection[2] *= sampleLengthInv[2];
		sampleDirection[3] *= sampleLengthInv[3];

		float4 sampleAngle = float4(
			dot(sampleDirection[0], viewNormal),
			dot(sampleDirection[1], viewNormal),
			dot(sampleDirection[2], viewNormal),
			dot(sampleDirection[3], viewNormal));

		float emitterScale = 2.5;
		float emitterRadius = sampleRadius.x;
		float emitterArea = (emitterScale * emitterRadius * emitterRadius) * PI * 0.25;

		float4 sh = emitterArea * saturate(sampleAngle - bias) / (sampleLength2 + emitterArea);

		sampleOcclustion.w += sum(sh);
		sampleOcclustion.xyz += sh.x * sampleDirection[0];
		sampleOcclustion.xyz += sh.y * sampleDirection[1];
		sampleOcclustion.xyz += sh.z * sampleDirection[2];
		sampleOcclustion.xyz += sh.w * sampleDirection[3];
	}

	sampleOcclustion /= SSDO_SAMPLER_COUNT;

	return float4(sampleOcclustion.xyz * 0.5 + 0.5, sampleOcclustion.w);
}

float4 ScreenSpaceAmbientOcclusionPS(
	in float4 coord : TEXCOORD0,
	in float4 SSDOParams : TEXCOORD1) : COLOR
{
	float maxRadius = mAmbientOcclusionRadius * 0.5;
	if (floor(fmod(coord.z, 2)) > 0) maxRadius *= 0.5;
	if (floor(fmod(coord.w, 2)) > 0) maxRadius *= 0.5;

	float3 viewNormal = SampleTransparentNormal(coord.xy);
	float3 viewPosition = SampleViewPosition(coord.xy);

	float jitter = GetJitterOffset(coord.zw);
	float maxRadiusPixels = mAmbientOcclusionMaxRadiusPixelPercentage * ViewportSize.y;
	float radius = clamp(maxRadius * log2(viewPosition.z), SSDO_SAMPLER_COUNT, maxRadiusPixels);

	float4 sh = ScreenSpaceAmbientOcclusion(coord, viewNormal, viewPosition, radius, jitter, mAmbientOcclusionBias);

	sh.w = sh.w * tex2Dlod(SSAOMap_PointSampler, float4(coord.xy, 0, 0)).a;
	sh.w = 1 - sh.w;

	return sh;
}

float4 ScreenSpaceBilateralBlurPS(
	in float2 coord   : TEXCOORD0,
	in float3 viewdir : TEXCOORD1,
	uniform sampler _MainTex,
	uniform float2 _MainTex_TexelSize) : COLOR
{
	float center_d = SampleLinearEyeDepth(coord);

	float total_w = 1.0f;
	float4 total_c = tex2Dlod(_MainTex, float4(coord, 0, 0));

	float3 normal = SampleTransparentNormal(coord);

	float angle = pow2(saturate(dot(normal, normalize(viewdir))));

	float blurSigma = SSDO_BLUR_RADIUS * 0.5f;
	float blurFalloff = 1.0f / (2.0f * blurSigma * blurSigma);

	float2 offset1 = coord + _MainTex_TexelSize;
	float2 offset2 = coord - _MainTex_TexelSize;

	[unroll]
	for (int r = 1; r < SSDO_BLUR_RADIUS; ++r)
	{
		float2 depth = float2(SampleLinearEyeDepth(offset1), SampleLinearEyeDepth(offset2));
		float2 weight = exp2(-r * r * blurFalloff - pow2((depth - center_d) * mAmbientOcclusionBilateralSharpness));

		weight.x *= saturate(dot(SampleTransparentNormal(offset1), normal));
		weight.y *= saturate(dot(SampleTransparentNormal(offset2), normal));

		total_c += tex2Dlod(_MainTex, float4(offset1, 0, 0)) * weight.x;
		total_c += tex2Dlod(_MainTex, float4(offset2, 0, 0)) * weight.y;

		total_w += sum(weight);

		offset1 += _MainTex_TexelSize;
		offset2 -= _MainTex_TexelSize;
	}

	return total_c / total_w;
}