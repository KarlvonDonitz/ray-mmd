// Monte Carlo integration of distributions

// Hammersley Points on the Hemisphere
// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html

float VanDerCorpus(int n, uint base)
{
	float invBase = 1.0 / float(base);
	float denom   = 1.0;
	float result  = 0.0;

	for (int i = 0; i < 32; i++)
	{
		if (n > 0)
		{
			denom   = float(n) % 2.0;
			result += denom * invBase;
			invBase = invBase / 2.0;
			n = uint(float(n) / 2.0);
		}
	}

	return result;
}

float2 HammersleyNoBitOps(uint i, uint samplesCount)
{
	float E1 = (float)i / samplesCount;
	return float2(E1, VanDerCorpus(i, 2u));
}

float4 HammersleySampleGGX(float2 E, float roughness)
{
	float m = roughness * roughness;
	float m2 = m * m;

	float Phi = 2 * 3.14 * E.x;
	float CosTheta = sqrt((1 - E.y) / ( 1 + (m2 - 1) * E.y));
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;
			
	float d = (CosTheta * m2 - CosTheta) * CosTheta + 1;
	float D = m2 / (3.14 * d * d);
			
	float PDF = D * CosTheta;

	return float4(H, PDF);
}

float4 CosineSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( E.y );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = CosTheta * (1.0 /  PI);

	return float4( H, PDF );
}

float4 TangentToWorld(float3 N, float4 H)
{
	float3 TangentY = abs(N.z) < 0.999 ? float3(0,0,1) : float3(1,0,0);
	float3 TangentX = normalize(cross(TangentY, N));
	return float4(TangentX * H.x + cross(N, TangentX) * H.y + N * H.z, H.w);
}